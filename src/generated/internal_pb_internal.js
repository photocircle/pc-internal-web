// source: internal.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.internal.AdminCircleMetadata', null, global);
goog.exportSymbol('proto.internal.AdminMemberMetadata', null, global);
goog.exportSymbol('proto.internal.AuthType', null, global);
goog.exportSymbol('proto.internal.Branding', null, global);
goog.exportSymbol('proto.internal.Circle', null, global);
goog.exportSymbol('proto.internal.CircleConfig', null, global);
goog.exportSymbol('proto.internal.CircleMember', null, global);
goog.exportSymbol('proto.internal.CircleMembershipConfig', null, global);
goog.exportSymbol('proto.internal.CirclePermissions', null, global);
goog.exportSymbol('proto.internal.EmailStatus', null, global);
goog.exportSymbol('proto.internal.FileType', null, global);
goog.exportSymbol('proto.internal.Group', null, global);
goog.exportSymbol('proto.internal.HelloRequest', null, global);
goog.exportSymbol('proto.internal.HelloResponse', null, global);
goog.exportSymbol('proto.internal.LegalUrls', null, global);
goog.exportSymbol('proto.internal.Media', null, global);
goog.exportSymbol('proto.internal.MediaComment', null, global);
goog.exportSymbol('proto.internal.MediaReaction', null, global);
goog.exportSymbol('proto.internal.Profile', null, global);
goog.exportSymbol('proto.internal.ReactionCategory', null, global);
goog.exportSymbol('proto.internal.ReactionSet', null, global);
goog.exportSymbol('proto.internal.Role', null, global);
goog.exportSymbol('proto.internal.SchemaVersion', null, global);
goog.exportSymbol('proto.internal.StatusCode', null, global);
goog.exportSymbol('proto.internal.UserAlert', null, global);
goog.exportSymbol('proto.internal.UserAlertButton', null, global);
goog.exportSymbol('proto.internal.UserAlertButtonAction', null, global);
goog.exportSymbol('proto.internal.VideoResolution', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.Branding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.Branding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.Branding.displayName = 'proto.internal.Branding';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.CirclePermissions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.CirclePermissions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.CirclePermissions.displayName = 'proto.internal.CirclePermissions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.CircleConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.internal.CircleConfig.repeatedFields_, null);
};
goog.inherits(proto.internal.CircleConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.CircleConfig.displayName = 'proto.internal.CircleConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.AdminCircleMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.internal.AdminCircleMetadata.repeatedFields_, null);
};
goog.inherits(proto.internal.AdminCircleMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.AdminCircleMetadata.displayName = 'proto.internal.AdminCircleMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.Circle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.Circle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.Circle.displayName = 'proto.internal.Circle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.Role = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.Role, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.Role.displayName = 'proto.internal.Role';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.AdminMemberMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.AdminMemberMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.AdminMemberMetadata.displayName = 'proto.internal.AdminMemberMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.CircleMember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.internal.CircleMember.repeatedFields_, null);
};
goog.inherits(proto.internal.CircleMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.CircleMember.displayName = 'proto.internal.CircleMember';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.CircleMembershipConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.CircleMembershipConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.CircleMembershipConfig.displayName = 'proto.internal.CircleMembershipConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.Media = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.Media, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.Media.displayName = 'proto.internal.Media';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.MediaComment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.MediaComment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.MediaComment.displayName = 'proto.internal.MediaComment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.MediaReaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.MediaReaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.MediaReaction.displayName = 'proto.internal.MediaReaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.Profile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.internal.Profile.repeatedFields_, null);
};
goog.inherits(proto.internal.Profile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.Profile.displayName = 'proto.internal.Profile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.Group.displayName = 'proto.internal.Group';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.ReactionCategory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.ReactionCategory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.ReactionCategory.displayName = 'proto.internal.ReactionCategory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.ReactionSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.internal.ReactionSet.repeatedFields_, null);
};
goog.inherits(proto.internal.ReactionSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.ReactionSet.displayName = 'proto.internal.ReactionSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.LegalUrls = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.LegalUrls, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.LegalUrls.displayName = 'proto.internal.LegalUrls';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.UserAlert = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.internal.UserAlert.repeatedFields_, null);
};
goog.inherits(proto.internal.UserAlert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.UserAlert.displayName = 'proto.internal.UserAlert';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.UserAlertButton = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.UserAlertButton, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.UserAlertButton.displayName = 'proto.internal.UserAlertButton';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.HelloRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.HelloRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.HelloRequest.displayName = 'proto.internal.HelloRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.internal.HelloResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.internal.HelloResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.internal.HelloResponse.displayName = 'proto.internal.HelloResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.Branding.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.Branding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.Branding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.Branding.toObject = function(includeInstance, msg) {
  var f, obj = {
    headerBackgroundColor: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    primaryColor: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    logoUrl: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    actionUrl: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.Branding}
 */
proto.internal.Branding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.Branding;
  return proto.internal.Branding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.Branding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.Branding}
 */
proto.internal.Branding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeaderBackgroundColor(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrimaryColor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogoUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.Branding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.Branding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.Branding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.Branding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required string header_background_color = 1;
 * @return {string}
 */
proto.internal.Branding.prototype.getHeaderBackgroundColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Branding} returns this
 */
proto.internal.Branding.prototype.setHeaderBackgroundColor = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Branding} returns this
 */
proto.internal.Branding.prototype.clearHeaderBackgroundColor = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Branding.prototype.hasHeaderBackgroundColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string primary_color = 2;
 * @return {string}
 */
proto.internal.Branding.prototype.getPrimaryColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Branding} returns this
 */
proto.internal.Branding.prototype.setPrimaryColor = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Branding} returns this
 */
proto.internal.Branding.prototype.clearPrimaryColor = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Branding.prototype.hasPrimaryColor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string logo_url = 3;
 * @return {string}
 */
proto.internal.Branding.prototype.getLogoUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Branding} returns this
 */
proto.internal.Branding.prototype.setLogoUrl = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Branding} returns this
 */
proto.internal.Branding.prototype.clearLogoUrl = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Branding.prototype.hasLogoUrl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string action_url = 4;
 * @return {string}
 */
proto.internal.Branding.prototype.getActionUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Branding} returns this
 */
proto.internal.Branding.prototype.setActionUrl = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Branding} returns this
 */
proto.internal.Branding.prototype.clearActionUrl = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Branding.prototype.hasActionUrl = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.CirclePermissions.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.CirclePermissions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.CirclePermissions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.CirclePermissions.toObject = function(includeInstance, msg) {
  var f, obj = {
    canAddMedia: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    canViewComments: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    canAddComments: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    canViewReactions: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    canAddReaction: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    canViewMembersList: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
    canInviteMembers: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f,
    canDeleteCircle: (f = jspb.Message.getBooleanField(msg, 8)) == null ? undefined : f,
    canLeaveCircle: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f,
    canRemoveMembers: (f = jspb.Message.getBooleanField(msg, 10)) == null ? undefined : f,
    canUpdateTitle: (f = jspb.Message.getBooleanField(msg, 12)) == null ? undefined : f,
    canShareWebAlbum: (f = jspb.Message.getBooleanField(msg, 13)) == null ? undefined : f,
    canSaveIndividualMedia: (f = jspb.Message.getBooleanField(msg, 14)) == null ? undefined : f,
    canSaveAllToLibrary: (f = jspb.Message.getBooleanField(msg, 15)) == null ? undefined : f,
    canShareMedia: (f = jspb.Message.getBooleanField(msg, 16)) == null ? undefined : f,
    canSetCircleCover: (f = jspb.Message.getBooleanField(msg, 17)) == null ? undefined : f,
    canRemoveOtherMedia: (f = jspb.Message.getBooleanField(msg, 18)) == null ? undefined : f,
    canRemoveOtherComments: (f = jspb.Message.getBooleanField(msg, 19)) == null ? undefined : f,
    canViewDates: (f = jspb.Message.getBooleanField(msg, 20)) == null ? undefined : f,
    canUpdateOtherCaption: (f = jspb.Message.getBooleanField(msg, 21)) == null ? undefined : f,
    canReorderMedia: (f = jspb.Message.getBooleanField(msg, 22)) == null ? undefined : f,
    canUnblockUsers: (f = jspb.Message.getBooleanField(msg, 23)) == null ? undefined : f,
    canDownloadZip: (f = jspb.Message.getBooleanField(msg, 24)) == null ? undefined : f,
    canDownloadExcel: (f = jspb.Message.getBooleanField(msg, 25)) == null ? undefined : f,
    canInactivateMembership: (f = jspb.Message.getBooleanField(msg, 26)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.CirclePermissions}
 */
proto.internal.CirclePermissions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.CirclePermissions;
  return proto.internal.CirclePermissions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.CirclePermissions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.CirclePermissions}
 */
proto.internal.CirclePermissions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanAddMedia(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanViewComments(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanAddComments(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanViewReactions(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanAddReaction(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanViewMembersList(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanInviteMembers(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanDeleteCircle(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanLeaveCircle(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanRemoveMembers(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanUpdateTitle(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanShareWebAlbum(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanSaveIndividualMedia(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanSaveAllToLibrary(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanShareMedia(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanSetCircleCover(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanRemoveOtherMedia(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanRemoveOtherComments(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanViewDates(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanUpdateOtherCaption(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanReorderMedia(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanUnblockUsers(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanDownloadZip(value);
      break;
    case 25:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanDownloadExcel(value);
      break;
    case 26:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanInactivateMembership(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.CirclePermissions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.CirclePermissions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.CirclePermissions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.CirclePermissions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBool(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeBool(
      19,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBool(
      20,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeBool(
      21,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeBool(
      22,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeBool(
      23,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeBool(
      24,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeBool(
      25,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeBool(
      26,
      f
    );
  }
};


/**
 * required bool can_add_media = 1;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanAddMedia = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanAddMedia = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanAddMedia = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanAddMedia = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool can_view_comments = 2;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanViewComments = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanViewComments = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanViewComments = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanViewComments = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool can_add_comments = 3;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanAddComments = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanAddComments = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanAddComments = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanAddComments = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required bool can_view_reactions = 4;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanViewReactions = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanViewReactions = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanViewReactions = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanViewReactions = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required bool can_add_reaction = 5;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanAddReaction = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanAddReaction = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanAddReaction = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanAddReaction = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required bool can_view_members_list = 6;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanViewMembersList = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanViewMembersList = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanViewMembersList = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanViewMembersList = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required bool can_invite_members = 7;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanInviteMembers = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanInviteMembers = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanInviteMembers = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanInviteMembers = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required bool can_delete_circle = 8;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanDeleteCircle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanDeleteCircle = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanDeleteCircle = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanDeleteCircle = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required bool can_leave_circle = 9;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanLeaveCircle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanLeaveCircle = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanLeaveCircle = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanLeaveCircle = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required bool can_remove_members = 10;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanRemoveMembers = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanRemoveMembers = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanRemoveMembers = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanRemoveMembers = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required bool can_update_title = 12;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanUpdateTitle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanUpdateTitle = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanUpdateTitle = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanUpdateTitle = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required bool can_share_web_album = 13;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanShareWebAlbum = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanShareWebAlbum = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanShareWebAlbum = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanShareWebAlbum = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required bool can_save_individual_media = 14;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanSaveIndividualMedia = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanSaveIndividualMedia = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanSaveIndividualMedia = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanSaveIndividualMedia = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * required bool can_save_all_to_library = 15;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanSaveAllToLibrary = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanSaveAllToLibrary = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanSaveAllToLibrary = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanSaveAllToLibrary = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * required bool can_share_media = 16;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanShareMedia = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanShareMedia = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanShareMedia = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanShareMedia = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * required bool can_set_circle_cover = 17;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanSetCircleCover = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanSetCircleCover = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanSetCircleCover = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanSetCircleCover = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * required bool can_remove_other_media = 18;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanRemoveOtherMedia = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanRemoveOtherMedia = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanRemoveOtherMedia = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanRemoveOtherMedia = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * required bool can_remove_other_comments = 19;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanRemoveOtherComments = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanRemoveOtherComments = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanRemoveOtherComments = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanRemoveOtherComments = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * required bool can_view_dates = 20;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanViewDates = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanViewDates = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanViewDates = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanViewDates = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * required bool can_update_other_caption = 21;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanUpdateOtherCaption = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanUpdateOtherCaption = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanUpdateOtherCaption = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanUpdateOtherCaption = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * required bool can_reorder_media = 22;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanReorderMedia = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanReorderMedia = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanReorderMedia = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanReorderMedia = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * required bool can_unblock_users = 23;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanUnblockUsers = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanUnblockUsers = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanUnblockUsers = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanUnblockUsers = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * required bool can_download_zip = 24;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanDownloadZip = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 24, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanDownloadZip = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanDownloadZip = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanDownloadZip = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * required bool can_download_excel = 25;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanDownloadExcel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 25, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanDownloadExcel = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanDownloadExcel = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanDownloadExcel = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * required bool can_inactivate_membership = 26;
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.getCanInactivateMembership = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 26, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.setCanInactivateMembership = function(value) {
  return jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CirclePermissions} returns this
 */
proto.internal.CirclePermissions.prototype.clearCanInactivateMembership = function() {
  return jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CirclePermissions.prototype.hasCanInactivateMembership = function() {
  return jspb.Message.getField(this, 26) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.internal.CircleConfig.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.CircleConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.CircleConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.CircleConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.CircleConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enableAds: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    maxVideoLength: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    enableEventTracking: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    branding: (f = msg.getBranding()) && proto.internal.Branding.toObject(includeInstance, f),
    defaultVideoSelectionLength: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    minimumVideoLengthForTrim: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    reactionSet: (f = msg.getReactionSet()) && proto.internal.ReactionSet.toObject(includeInstance, f),
    maxPhotoDimension: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    videoResolution: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    videoBitrateKbps: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
    proto.internal.Role.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.CircleConfig}
 */
proto.internal.CircleConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.CircleConfig;
  return proto.internal.CircleConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.CircleConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.CircleConfig}
 */
proto.internal.CircleConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableAds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxVideoLength(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableEventTracking(value);
      break;
    case 4:
      var value = new proto.internal.Branding;
      reader.readMessage(value,proto.internal.Branding.deserializeBinaryFromReader);
      msg.setBranding(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDefaultVideoSelectionLength(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinimumVideoLengthForTrim(value);
      break;
    case 7:
      var value = new proto.internal.ReactionSet;
      reader.readMessage(value,proto.internal.ReactionSet.deserializeBinaryFromReader);
      msg.setReactionSet(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxPhotoDimension(value);
      break;
    case 9:
      var value = /** @type {!proto.internal.VideoResolution} */ (reader.readEnum());
      msg.setVideoResolution(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVideoBitrateKbps(value);
      break;
    case 11:
      var value = new proto.internal.Role;
      reader.readMessage(value,proto.internal.Role.deserializeBinaryFromReader);
      msg.addRoles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.CircleConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.CircleConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.CircleConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.CircleConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getBranding();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.internal.Branding.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getReactionSet();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.internal.ReactionSet.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {!proto.internal.VideoResolution} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.internal.Role.serializeBinaryToWriter
    );
  }
};


/**
 * required bool enable_ads = 1;
 * @return {boolean}
 */
proto.internal.CircleConfig.prototype.getEnableAds = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.setEnableAds = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.clearEnableAds = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleConfig.prototype.hasEnableAds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 max_video_length = 2;
 * @return {number}
 */
proto.internal.CircleConfig.prototype.getMaxVideoLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.setMaxVideoLength = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.clearMaxVideoLength = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleConfig.prototype.hasMaxVideoLength = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool enable_event_tracking = 3;
 * @return {boolean}
 */
proto.internal.CircleConfig.prototype.getEnableEventTracking = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.setEnableEventTracking = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.clearEnableEventTracking = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleConfig.prototype.hasEnableEventTracking = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Branding branding = 4;
 * @return {?proto.internal.Branding}
 */
proto.internal.CircleConfig.prototype.getBranding = function() {
  return /** @type{?proto.internal.Branding} */ (
    jspb.Message.getWrapperField(this, proto.internal.Branding, 4));
};


/**
 * @param {?proto.internal.Branding|undefined} value
 * @return {!proto.internal.CircleConfig} returns this
*/
proto.internal.CircleConfig.prototype.setBranding = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.clearBranding = function() {
  return this.setBranding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleConfig.prototype.hasBranding = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 default_video_selection_length = 5;
 * @return {number}
 */
proto.internal.CircleConfig.prototype.getDefaultVideoSelectionLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.setDefaultVideoSelectionLength = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.clearDefaultVideoSelectionLength = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleConfig.prototype.hasDefaultVideoSelectionLength = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 minimum_video_length_for_trim = 6;
 * @return {number}
 */
proto.internal.CircleConfig.prototype.getMinimumVideoLengthForTrim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.setMinimumVideoLengthForTrim = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.clearMinimumVideoLengthForTrim = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleConfig.prototype.hasMinimumVideoLengthForTrim = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ReactionSet reaction_set = 7;
 * @return {?proto.internal.ReactionSet}
 */
proto.internal.CircleConfig.prototype.getReactionSet = function() {
  return /** @type{?proto.internal.ReactionSet} */ (
    jspb.Message.getWrapperField(this, proto.internal.ReactionSet, 7));
};


/**
 * @param {?proto.internal.ReactionSet|undefined} value
 * @return {!proto.internal.CircleConfig} returns this
*/
proto.internal.CircleConfig.prototype.setReactionSet = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.clearReactionSet = function() {
  return this.setReactionSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleConfig.prototype.hasReactionSet = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 max_photo_dimension = 8;
 * @return {number}
 */
proto.internal.CircleConfig.prototype.getMaxPhotoDimension = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.setMaxPhotoDimension = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.clearMaxPhotoDimension = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleConfig.prototype.hasMaxPhotoDimension = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional VideoResolution video_resolution = 9;
 * @return {!proto.internal.VideoResolution}
 */
proto.internal.CircleConfig.prototype.getVideoResolution = function() {
  return /** @type {!proto.internal.VideoResolution} */ (jspb.Message.getFieldWithDefault(this, 9, 1));
};


/**
 * @param {!proto.internal.VideoResolution} value
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.setVideoResolution = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.clearVideoResolution = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleConfig.prototype.hasVideoResolution = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 video_bitrate_kbps = 10;
 * @return {number}
 */
proto.internal.CircleConfig.prototype.getVideoBitrateKbps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.setVideoBitrateKbps = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.clearVideoBitrateKbps = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleConfig.prototype.hasVideoBitrateKbps = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated Role roles = 11;
 * @return {!Array<!proto.internal.Role>}
 */
proto.internal.CircleConfig.prototype.getRolesList = function() {
  return /** @type{!Array<!proto.internal.Role>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.internal.Role, 11));
};


/**
 * @param {!Array<!proto.internal.Role>} value
 * @return {!proto.internal.CircleConfig} returns this
*/
proto.internal.CircleConfig.prototype.setRolesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.internal.Role=} opt_value
 * @param {number=} opt_index
 * @return {!proto.internal.Role}
 */
proto.internal.CircleConfig.prototype.addRoles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.internal.Role, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.internal.CircleConfig} returns this
 */
proto.internal.CircleConfig.prototype.clearRolesList = function() {
  return this.setRolesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.internal.AdminCircleMetadata.repeatedFields_ = [3,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.AdminCircleMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.AdminCircleMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.AdminCircleMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.AdminCircleMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    mediaCount: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    memberCount: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
    proto.internal.Role.toObject, includeInstance),
    memberUuid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    roleId: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    targetRoleIdsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.AdminCircleMetadata}
 */
proto.internal.AdminCircleMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.AdminCircleMetadata;
  return proto.internal.AdminCircleMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.AdminCircleMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.AdminCircleMetadata}
 */
proto.internal.AdminCircleMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMediaCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMemberCount(value);
      break;
    case 3:
      var value = new proto.internal.Role;
      reader.readMessage(value,proto.internal.Role.deserializeBinaryFromReader);
      msg.addRoles(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberUuid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoleId(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTargetRoleIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.AdminCircleMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.AdminCircleMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.AdminCircleMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.AdminCircleMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.internal.Role.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getTargetRoleIdsList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      6,
      f
    );
  }
};


/**
 * required uint32 media_count = 1;
 * @return {number}
 */
proto.internal.AdminCircleMetadata.prototype.getMediaCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.AdminCircleMetadata} returns this
 */
proto.internal.AdminCircleMetadata.prototype.setMediaCount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.AdminCircleMetadata} returns this
 */
proto.internal.AdminCircleMetadata.prototype.clearMediaCount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.AdminCircleMetadata.prototype.hasMediaCount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 member_count = 2;
 * @return {number}
 */
proto.internal.AdminCircleMetadata.prototype.getMemberCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.AdminCircleMetadata} returns this
 */
proto.internal.AdminCircleMetadata.prototype.setMemberCount = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.AdminCircleMetadata} returns this
 */
proto.internal.AdminCircleMetadata.prototype.clearMemberCount = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.AdminCircleMetadata.prototype.hasMemberCount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Role roles = 3;
 * @return {!Array<!proto.internal.Role>}
 */
proto.internal.AdminCircleMetadata.prototype.getRolesList = function() {
  return /** @type{!Array<!proto.internal.Role>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.internal.Role, 3));
};


/**
 * @param {!Array<!proto.internal.Role>} value
 * @return {!proto.internal.AdminCircleMetadata} returns this
*/
proto.internal.AdminCircleMetadata.prototype.setRolesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.internal.Role=} opt_value
 * @param {number=} opt_index
 * @return {!proto.internal.Role}
 */
proto.internal.AdminCircleMetadata.prototype.addRoles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.internal.Role, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.internal.AdminCircleMetadata} returns this
 */
proto.internal.AdminCircleMetadata.prototype.clearRolesList = function() {
  return this.setRolesList([]);
};


/**
 * optional string member_uuid = 4;
 * @return {string}
 */
proto.internal.AdminCircleMetadata.prototype.getMemberUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.AdminCircleMetadata} returns this
 */
proto.internal.AdminCircleMetadata.prototype.setMemberUuid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.AdminCircleMetadata} returns this
 */
proto.internal.AdminCircleMetadata.prototype.clearMemberUuid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.AdminCircleMetadata.prototype.hasMemberUuid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 role_id = 5;
 * @return {number}
 */
proto.internal.AdminCircleMetadata.prototype.getRoleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.AdminCircleMetadata} returns this
 */
proto.internal.AdminCircleMetadata.prototype.setRoleId = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.AdminCircleMetadata} returns this
 */
proto.internal.AdminCircleMetadata.prototype.clearRoleId = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.AdminCircleMetadata.prototype.hasRoleId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated uint32 target_role_ids = 6;
 * @return {!Array<number>}
 */
proto.internal.AdminCircleMetadata.prototype.getTargetRoleIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.internal.AdminCircleMetadata} returns this
 */
proto.internal.AdminCircleMetadata.prototype.setTargetRoleIdsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.internal.AdminCircleMetadata} returns this
 */
proto.internal.AdminCircleMetadata.prototype.addTargetRoleIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.internal.AdminCircleMetadata} returns this
 */
proto.internal.AdminCircleMetadata.prototype.clearTargetRoleIdsList = function() {
  return this.setTargetRoleIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.Circle.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.Circle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.Circle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.Circle.toObject = function(includeInstance, msg) {
  var f, obj = {
    circleUuid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    title: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    dateCreatedTimestamp: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    coverPhotoMediaUuid: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    groupUuid: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    lastActivityTimestamp: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    internalId: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    workspaceUuid: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    lastMediaUuid: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    adminCircleMetadata: (f = msg.getAdminCircleMetadata()) && proto.internal.AdminCircleMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.Circle}
 */
proto.internal.Circle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.Circle;
  return proto.internal.Circle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.Circle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.Circle}
 */
proto.internal.Circle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCircleUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDateCreatedTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoverPhotoMediaUuid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupUuid(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastActivityTimestamp(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setInternalId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkspaceUuid(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastMediaUuid(value);
      break;
    case 14:
      var value = new proto.internal.AdminCircleMetadata;
      reader.readMessage(value,proto.internal.AdminCircleMetadata.deserializeBinaryFromReader);
      msg.setAdminCircleMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.Circle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.Circle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.Circle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.Circle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getAdminCircleMetadata();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.internal.AdminCircleMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * required string circle_uuid = 1;
 * @return {string}
 */
proto.internal.Circle.prototype.getCircleUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.setCircleUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.clearCircleUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Circle.prototype.hasCircleUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string title = 2;
 * @return {string}
 */
proto.internal.Circle.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.setTitle = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.clearTitle = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Circle.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 date_created_timestamp = 4;
 * @return {number}
 */
proto.internal.Circle.prototype.getDateCreatedTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.setDateCreatedTimestamp = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.clearDateCreatedTimestamp = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Circle.prototype.hasDateCreatedTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string cover_photo_media_uuid = 5;
 * @return {string}
 */
proto.internal.Circle.prototype.getCoverPhotoMediaUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.setCoverPhotoMediaUuid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.clearCoverPhotoMediaUuid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Circle.prototype.hasCoverPhotoMediaUuid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string group_uuid = 7;
 * @return {string}
 */
proto.internal.Circle.prototype.getGroupUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.setGroupUuid = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.clearGroupUuid = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Circle.prototype.hasGroupUuid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 last_activity_timestamp = 10;
 * @return {number}
 */
proto.internal.Circle.prototype.getLastActivityTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.setLastActivityTimestamp = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.clearLastActivityTimestamp = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Circle.prototype.hasLastActivityTimestamp = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string internal_id = 11;
 * @return {string}
 */
proto.internal.Circle.prototype.getInternalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.setInternalId = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.clearInternalId = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Circle.prototype.hasInternalId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string workspace_uuid = 12;
 * @return {string}
 */
proto.internal.Circle.prototype.getWorkspaceUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.setWorkspaceUuid = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.clearWorkspaceUuid = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Circle.prototype.hasWorkspaceUuid = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string last_media_uuid = 13;
 * @return {string}
 */
proto.internal.Circle.prototype.getLastMediaUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.setLastMediaUuid = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.clearLastMediaUuid = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Circle.prototype.hasLastMediaUuid = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional AdminCircleMetadata admin_circle_metadata = 14;
 * @return {?proto.internal.AdminCircleMetadata}
 */
proto.internal.Circle.prototype.getAdminCircleMetadata = function() {
  return /** @type{?proto.internal.AdminCircleMetadata} */ (
    jspb.Message.getWrapperField(this, proto.internal.AdminCircleMetadata, 14));
};


/**
 * @param {?proto.internal.AdminCircleMetadata|undefined} value
 * @return {!proto.internal.Circle} returns this
*/
proto.internal.Circle.prototype.setAdminCircleMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.internal.Circle} returns this
 */
proto.internal.Circle.prototype.clearAdminCircleMetadata = function() {
  return this.setAdminCircleMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Circle.prototype.hasAdminCircleMetadata = function() {
  return jspb.Message.getField(this, 14) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.Role.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.Role.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.Role} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.Role.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    description: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    iconId: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    iconBytes: msg.getIconBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.Role}
 */
proto.internal.Role.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.Role;
  return proto.internal.Role.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.Role} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.Role}
 */
proto.internal.Role.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoleId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIconId(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIconBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.Role.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.Role.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.Role} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.Role.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * required uint32 role_id = 1;
 * @return {number}
 */
proto.internal.Role.prototype.getRoleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.Role} returns this
 */
proto.internal.Role.prototype.setRoleId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Role} returns this
 */
proto.internal.Role.prototype.clearRoleId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Role.prototype.hasRoleId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string name = 2;
 * @return {string}
 */
proto.internal.Role.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Role} returns this
 */
proto.internal.Role.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Role} returns this
 */
proto.internal.Role.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Role.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.internal.Role.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Role} returns this
 */
proto.internal.Role.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Role} returns this
 */
proto.internal.Role.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Role.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 icon_id = 4;
 * @return {number}
 */
proto.internal.Role.prototype.getIconId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.Role} returns this
 */
proto.internal.Role.prototype.setIconId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Role} returns this
 */
proto.internal.Role.prototype.clearIconId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Role.prototype.hasIconId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes icon_bytes = 5;
 * @return {!(string|Uint8Array)}
 */
proto.internal.Role.prototype.getIconBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes icon_bytes = 5;
 * This is a type-conversion wrapper around `getIconBytes()`
 * @return {string}
 */
proto.internal.Role.prototype.getIconBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIconBytes()));
};


/**
 * optional bytes icon_bytes = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIconBytes()`
 * @return {!Uint8Array}
 */
proto.internal.Role.prototype.getIconBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIconBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.internal.Role} returns this
 */
proto.internal.Role.prototype.setIconBytes = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Role} returns this
 */
proto.internal.Role.prototype.clearIconBytes = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Role.prototype.hasIconBytes = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.AdminMemberMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.AdminMemberMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.AdminMemberMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.AdminMemberMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    mediaCount: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    lastSessionTimestamp: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.AdminMemberMetadata}
 */
proto.internal.AdminMemberMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.AdminMemberMetadata;
  return proto.internal.AdminMemberMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.AdminMemberMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.AdminMemberMetadata}
 */
proto.internal.AdminMemberMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMediaCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastSessionTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.AdminMemberMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.AdminMemberMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.AdminMemberMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.AdminMemberMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * required uint32 media_count = 1;
 * @return {number}
 */
proto.internal.AdminMemberMetadata.prototype.getMediaCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.AdminMemberMetadata} returns this
 */
proto.internal.AdminMemberMetadata.prototype.setMediaCount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.AdminMemberMetadata} returns this
 */
proto.internal.AdminMemberMetadata.prototype.clearMediaCount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.AdminMemberMetadata.prototype.hasMediaCount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 last_session_timestamp = 2;
 * @return {number}
 */
proto.internal.AdminMemberMetadata.prototype.getLastSessionTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.AdminMemberMetadata} returns this
 */
proto.internal.AdminMemberMetadata.prototype.setLastSessionTimestamp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.AdminMemberMetadata} returns this
 */
proto.internal.AdminMemberMetadata.prototype.clearLastSessionTimestamp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.AdminMemberMetadata.prototype.hasLastSessionTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.internal.CircleMember.repeatedFields_ = [17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.CircleMember.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.CircleMember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.CircleMember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.CircleMember.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberUuid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    userUuid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    circleUuid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    lastUpdatedTimestamp: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    displayName: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    avatarUrl: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    invitedByMemberUuid: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    dateJoinedTimestamp: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    lastSessionTimestamp: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    isActive: (f = jspb.Message.getBooleanField(msg, 12)) == null ? undefined : f,
    isRemovable: (f = jspb.Message.getBooleanField(msg, 14)) == null ? undefined : f,
    isWorkspaceMember: (f = jspb.Message.getBooleanField(msg, 15)) == null ? undefined : f,
    roleId: (f = jspb.Message.getField(msg, 16)) == null ? undefined : f,
    targetRoleIdsList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f,
    adminMemberMetadata: (f = msg.getAdminMemberMetadata()) && proto.internal.AdminMemberMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.CircleMember}
 */
proto.internal.CircleMember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.CircleMember;
  return proto.internal.CircleMember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.CircleMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.CircleMember}
 */
proto.internal.CircleMember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCircleUuid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastUpdatedTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvitedByMemberUuid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDateJoinedTimestamp(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastSessionTimestamp(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRemovable(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsWorkspaceMember(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoleId(value);
      break;
    case 17:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTargetRoleIds(values[i]);
      }
      break;
    case 18:
      var value = new proto.internal.AdminMemberMetadata;
      reader.readMessage(value,proto.internal.AdminMemberMetadata.deserializeBinaryFromReader);
      msg.setAdminMemberMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.CircleMember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.CircleMember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.CircleMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.CircleMember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBool(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = message.getTargetRoleIdsList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      17,
      f
    );
  }
  f = message.getAdminMemberMetadata();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.internal.AdminMemberMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * required string member_uuid = 1;
 * @return {string}
 */
proto.internal.CircleMember.prototype.getMemberUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.setMemberUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearMemberUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.hasMemberUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_uuid = 2;
 * @return {string}
 */
proto.internal.CircleMember.prototype.getUserUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.setUserUuid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearUserUuid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.hasUserUuid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string circle_uuid = 3;
 * @return {string}
 */
proto.internal.CircleMember.prototype.getCircleUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.setCircleUuid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearCircleUuid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.hasCircleUuid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint64 last_updated_timestamp = 4;
 * @return {number}
 */
proto.internal.CircleMember.prototype.getLastUpdatedTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.setLastUpdatedTimestamp = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearLastUpdatedTimestamp = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.hasLastUpdatedTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string display_name = 5;
 * @return {string}
 */
proto.internal.CircleMember.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.setDisplayName = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearDisplayName = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.hasDisplayName = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string avatar_url = 6;
 * @return {string}
 */
proto.internal.CircleMember.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.setAvatarUrl = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearAvatarUrl = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.hasAvatarUrl = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string invited_by_member_uuid = 7;
 * @return {string}
 */
proto.internal.CircleMember.prototype.getInvitedByMemberUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.setInvitedByMemberUuid = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearInvitedByMemberUuid = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.hasInvitedByMemberUuid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint64 date_joined_timestamp = 8;
 * @return {number}
 */
proto.internal.CircleMember.prototype.getDateJoinedTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.setDateJoinedTimestamp = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearDateJoinedTimestamp = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.hasDateJoinedTimestamp = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint64 last_session_timestamp = 11;
 * @return {number}
 */
proto.internal.CircleMember.prototype.getLastSessionTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.setLastSessionTimestamp = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearLastSessionTimestamp = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.hasLastSessionTimestamp = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required bool is_active = 12;
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.setIsActive = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearIsActive = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.hasIsActive = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required bool is_removable = 14;
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.getIsRemovable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.setIsRemovable = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearIsRemovable = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.hasIsRemovable = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * required bool is_workspace_member = 15;
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.getIsWorkspaceMember = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.setIsWorkspaceMember = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearIsWorkspaceMember = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.hasIsWorkspaceMember = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * required uint32 role_id = 16;
 * @return {number}
 */
proto.internal.CircleMember.prototype.getRoleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.setRoleId = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearRoleId = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.hasRoleId = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * repeated uint32 target_role_ids = 17;
 * @return {!Array<number>}
 */
proto.internal.CircleMember.prototype.getTargetRoleIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 17));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.setTargetRoleIdsList = function(value) {
  return jspb.Message.setField(this, 17, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.addTargetRoleIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 17, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearTargetRoleIdsList = function() {
  return this.setTargetRoleIdsList([]);
};


/**
 * optional AdminMemberMetadata admin_member_metadata = 18;
 * @return {?proto.internal.AdminMemberMetadata}
 */
proto.internal.CircleMember.prototype.getAdminMemberMetadata = function() {
  return /** @type{?proto.internal.AdminMemberMetadata} */ (
    jspb.Message.getWrapperField(this, proto.internal.AdminMemberMetadata, 18));
};


/**
 * @param {?proto.internal.AdminMemberMetadata|undefined} value
 * @return {!proto.internal.CircleMember} returns this
*/
proto.internal.CircleMember.prototype.setAdminMemberMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.internal.CircleMember} returns this
 */
proto.internal.CircleMember.prototype.clearAdminMemberMetadata = function() {
  return this.setAdminMemberMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMember.prototype.hasAdminMemberMetadata = function() {
  return jspb.Message.getField(this, 18) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.CircleMembershipConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.CircleMembershipConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.CircleMembershipConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.CircleMembershipConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    circleUuid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    memberUuid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    permissions: (f = msg.getPermissions()) && proto.internal.CirclePermissions.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.internal.CircleConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.CircleMembershipConfig}
 */
proto.internal.CircleMembershipConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.CircleMembershipConfig;
  return proto.internal.CircleMembershipConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.CircleMembershipConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.CircleMembershipConfig}
 */
proto.internal.CircleMembershipConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCircleUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberUuid(value);
      break;
    case 3:
      var value = new proto.internal.CirclePermissions;
      reader.readMessage(value,proto.internal.CirclePermissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    case 4:
      var value = new proto.internal.CircleConfig;
      reader.readMessage(value,proto.internal.CircleConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.CircleMembershipConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.CircleMembershipConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.CircleMembershipConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.CircleMembershipConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.internal.CirclePermissions.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.internal.CircleConfig.serializeBinaryToWriter
    );
  }
};


/**
 * required string circle_uuid = 1;
 * @return {string}
 */
proto.internal.CircleMembershipConfig.prototype.getCircleUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.CircleMembershipConfig} returns this
 */
proto.internal.CircleMembershipConfig.prototype.setCircleUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMembershipConfig} returns this
 */
proto.internal.CircleMembershipConfig.prototype.clearCircleUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMembershipConfig.prototype.hasCircleUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string member_uuid = 2;
 * @return {string}
 */
proto.internal.CircleMembershipConfig.prototype.getMemberUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.CircleMembershipConfig} returns this
 */
proto.internal.CircleMembershipConfig.prototype.setMemberUuid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.CircleMembershipConfig} returns this
 */
proto.internal.CircleMembershipConfig.prototype.clearMemberUuid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMembershipConfig.prototype.hasMemberUuid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CirclePermissions permissions = 3;
 * @return {?proto.internal.CirclePermissions}
 */
proto.internal.CircleMembershipConfig.prototype.getPermissions = function() {
  return /** @type{?proto.internal.CirclePermissions} */ (
    jspb.Message.getWrapperField(this, proto.internal.CirclePermissions, 3));
};


/**
 * @param {?proto.internal.CirclePermissions|undefined} value
 * @return {!proto.internal.CircleMembershipConfig} returns this
*/
proto.internal.CircleMembershipConfig.prototype.setPermissions = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.internal.CircleMembershipConfig} returns this
 */
proto.internal.CircleMembershipConfig.prototype.clearPermissions = function() {
  return this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMembershipConfig.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CircleConfig config = 4;
 * @return {?proto.internal.CircleConfig}
 */
proto.internal.CircleMembershipConfig.prototype.getConfig = function() {
  return /** @type{?proto.internal.CircleConfig} */ (
    jspb.Message.getWrapperField(this, proto.internal.CircleConfig, 4));
};


/**
 * @param {?proto.internal.CircleConfig|undefined} value
 * @return {!proto.internal.CircleMembershipConfig} returns this
*/
proto.internal.CircleMembershipConfig.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.internal.CircleMembershipConfig} returns this
 */
proto.internal.CircleMembershipConfig.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.CircleMembershipConfig.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.Media.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.Media.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.Media} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.Media.toObject = function(includeInstance, msg) {
  var f, obj = {
    mediaUuid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    circleUuid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    isVideo: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    addedByMemberUuid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    dateAddedTimestamp: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    caption: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    previewData: msg.getPreviewData_asB64(),
    sortKey: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.Media}
 */
proto.internal.Media.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.Media;
  return proto.internal.Media.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.Media} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.Media}
 */
proto.internal.Media.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMediaUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCircleUuid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsVideo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddedByMemberUuid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDateAddedTimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviewData(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSortKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.Media.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.Media.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.Media} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.Media.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
};


/**
 * required string media_uuid = 1;
 * @return {string}
 */
proto.internal.Media.prototype.getMediaUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.setMediaUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.clearMediaUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Media.prototype.hasMediaUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string circle_uuid = 2;
 * @return {string}
 */
proto.internal.Media.prototype.getCircleUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.setCircleUuid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.clearCircleUuid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Media.prototype.hasCircleUuid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool is_video = 3;
 * @return {boolean}
 */
proto.internal.Media.prototype.getIsVideo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.setIsVideo = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.clearIsVideo = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Media.prototype.hasIsVideo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string added_by_member_uuid = 4;
 * @return {string}
 */
proto.internal.Media.prototype.getAddedByMemberUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.setAddedByMemberUuid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.clearAddedByMemberUuid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Media.prototype.hasAddedByMemberUuid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint64 date_added_timestamp = 5;
 * @return {number}
 */
proto.internal.Media.prototype.getDateAddedTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.setDateAddedTimestamp = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.clearDateAddedTimestamp = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Media.prototype.hasDateAddedTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string caption = 6;
 * @return {string}
 */
proto.internal.Media.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.setCaption = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.clearCaption = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Media.prototype.hasCaption = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes preview_data = 7;
 * @return {!(string|Uint8Array)}
 */
proto.internal.Media.prototype.getPreviewData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes preview_data = 7;
 * This is a type-conversion wrapper around `getPreviewData()`
 * @return {string}
 */
proto.internal.Media.prototype.getPreviewData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviewData()));
};


/**
 * optional bytes preview_data = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviewData()`
 * @return {!Uint8Array}
 */
proto.internal.Media.prototype.getPreviewData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviewData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.setPreviewData = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.clearPreviewData = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Media.prototype.hasPreviewData = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int64 sort_key = 8;
 * @return {number}
 */
proto.internal.Media.prototype.getSortKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.setSortKey = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Media} returns this
 */
proto.internal.Media.prototype.clearSortKey = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Media.prototype.hasSortKey = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.MediaComment.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.MediaComment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.MediaComment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.MediaComment.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentUuid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    mediaUuid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    addedByMemberUuid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    commentText: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    dateAddedTimestamp: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.MediaComment}
 */
proto.internal.MediaComment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.MediaComment;
  return proto.internal.MediaComment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.MediaComment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.MediaComment}
 */
proto.internal.MediaComment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommentUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMediaUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddedByMemberUuid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommentText(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDateAddedTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.MediaComment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.MediaComment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.MediaComment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.MediaComment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * required string comment_uuid = 1;
 * @return {string}
 */
proto.internal.MediaComment.prototype.getCommentUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.MediaComment} returns this
 */
proto.internal.MediaComment.prototype.setCommentUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.MediaComment} returns this
 */
proto.internal.MediaComment.prototype.clearCommentUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.MediaComment.prototype.hasCommentUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string media_uuid = 2;
 * @return {string}
 */
proto.internal.MediaComment.prototype.getMediaUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.MediaComment} returns this
 */
proto.internal.MediaComment.prototype.setMediaUuid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.MediaComment} returns this
 */
proto.internal.MediaComment.prototype.clearMediaUuid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.MediaComment.prototype.hasMediaUuid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string added_by_member_uuid = 3;
 * @return {string}
 */
proto.internal.MediaComment.prototype.getAddedByMemberUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.MediaComment} returns this
 */
proto.internal.MediaComment.prototype.setAddedByMemberUuid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.MediaComment} returns this
 */
proto.internal.MediaComment.prototype.clearAddedByMemberUuid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.MediaComment.prototype.hasAddedByMemberUuid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string comment_text = 4;
 * @return {string}
 */
proto.internal.MediaComment.prototype.getCommentText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.MediaComment} returns this
 */
proto.internal.MediaComment.prototype.setCommentText = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.MediaComment} returns this
 */
proto.internal.MediaComment.prototype.clearCommentText = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.MediaComment.prototype.hasCommentText = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint64 date_added_timestamp = 5;
 * @return {number}
 */
proto.internal.MediaComment.prototype.getDateAddedTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.MediaComment} returns this
 */
proto.internal.MediaComment.prototype.setDateAddedTimestamp = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.MediaComment} returns this
 */
proto.internal.MediaComment.prototype.clearDateAddedTimestamp = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.MediaComment.prototype.hasDateAddedTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.MediaReaction.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.MediaReaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.MediaReaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.MediaReaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    mediaUuid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    addedByMemberUuid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    reactionText: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    dateModifiedTimestamp: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.MediaReaction}
 */
proto.internal.MediaReaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.MediaReaction;
  return proto.internal.MediaReaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.MediaReaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.MediaReaction}
 */
proto.internal.MediaReaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMediaUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddedByMemberUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReactionText(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDateModifiedTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.MediaReaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.MediaReaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.MediaReaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.MediaReaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * required string media_uuid = 1;
 * @return {string}
 */
proto.internal.MediaReaction.prototype.getMediaUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.MediaReaction} returns this
 */
proto.internal.MediaReaction.prototype.setMediaUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.MediaReaction} returns this
 */
proto.internal.MediaReaction.prototype.clearMediaUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.MediaReaction.prototype.hasMediaUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string added_by_member_uuid = 2;
 * @return {string}
 */
proto.internal.MediaReaction.prototype.getAddedByMemberUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.MediaReaction} returns this
 */
proto.internal.MediaReaction.prototype.setAddedByMemberUuid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.MediaReaction} returns this
 */
proto.internal.MediaReaction.prototype.clearAddedByMemberUuid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.MediaReaction.prototype.hasAddedByMemberUuid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string reaction_text = 3;
 * @return {string}
 */
proto.internal.MediaReaction.prototype.getReactionText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.MediaReaction} returns this
 */
proto.internal.MediaReaction.prototype.setReactionText = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.MediaReaction} returns this
 */
proto.internal.MediaReaction.prototype.clearReactionText = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.MediaReaction.prototype.hasReactionText = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint64 date_modified_timestamp = 4;
 * @return {number}
 */
proto.internal.MediaReaction.prototype.getDateModifiedTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.MediaReaction} returns this
 */
proto.internal.MediaReaction.prototype.setDateModifiedTimestamp = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.MediaReaction} returns this
 */
proto.internal.MediaReaction.prototype.clearDateModifiedTimestamp = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.MediaReaction.prototype.hasDateModifiedTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.internal.Profile.repeatedFields_ = [6,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.Profile.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.Profile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.Profile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.Profile.toObject = function(includeInstance, msg) {
  var f, obj = {
    userUuid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    lastUpdatedTimestamp: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    displayName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    email: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    avatarUrl: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    authTypesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    accountCreationTimestamp: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    groupUuid: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    isGroupAdmin: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f,
    lastSessionTimestamp: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.internal.Group.toObject, includeInstance),
    workspaceUuid: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    isDisabled: (f = jspb.Message.getBooleanField(msg, 14)) == null ? undefined : f,
    emailStatus: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
    adCustomTargetingMap: (f = msg.getAdCustomTargetingMap()) ? f.toObject(includeInstance, undefined) : [],
    isWorkspaceOwner: (f = jspb.Message.getBooleanField(msg, 17)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.Profile}
 */
proto.internal.Profile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.Profile;
  return proto.internal.Profile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.Profile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.Profile}
 */
proto.internal.Profile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastUpdatedTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 6:
      var values = /** @type {!Array<!proto.internal.AuthType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAuthTypes(values[i]);
      }
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAccountCreationTimestamp(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupUuid(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsGroupAdmin(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastSessionTimestamp(value);
      break;
    case 12:
      var value = new proto.internal.Group;
      reader.readMessage(value,proto.internal.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkspaceUuid(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDisabled(value);
      break;
    case 15:
      var value = /** @type {!proto.internal.EmailStatus} */ (reader.readEnum());
      msg.setEmailStatus(value);
      break;
    case 16:
      var value = msg.getAdCustomTargetingMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsWorkspaceOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.Profile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.Profile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.Profile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.Profile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAuthTypesList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.internal.Group.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {!proto.internal.EmailStatus} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeEnum(
      15,
      f
    );
  }
  f = message.getAdCustomTargetingMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
};


/**
 * required string user_uuid = 1;
 * @return {string}
 */
proto.internal.Profile.prototype.getUserUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.setUserUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearUserUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Profile.prototype.hasUserUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 last_updated_timestamp = 2;
 * @return {number}
 */
proto.internal.Profile.prototype.getLastUpdatedTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.setLastUpdatedTimestamp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearLastUpdatedTimestamp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Profile.prototype.hasLastUpdatedTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string display_name = 3;
 * @return {string}
 */
proto.internal.Profile.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.setDisplayName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearDisplayName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Profile.prototype.hasDisplayName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.internal.Profile.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.setEmail = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearEmail = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Profile.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string avatar_url = 5;
 * @return {string}
 */
proto.internal.Profile.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.setAvatarUrl = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearAvatarUrl = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Profile.prototype.hasAvatarUrl = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated AuthType auth_types = 6;
 * @return {!Array<!proto.internal.AuthType>}
 */
proto.internal.Profile.prototype.getAuthTypesList = function() {
  return /** @type {!Array<!proto.internal.AuthType>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<!proto.internal.AuthType>} value
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.setAuthTypesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.internal.AuthType} value
 * @param {number=} opt_index
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.addAuthTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearAuthTypesList = function() {
  return this.setAuthTypesList([]);
};


/**
 * required uint64 account_creation_timestamp = 7;
 * @return {number}
 */
proto.internal.Profile.prototype.getAccountCreationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.setAccountCreationTimestamp = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearAccountCreationTimestamp = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Profile.prototype.hasAccountCreationTimestamp = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string group_uuid = 8;
 * @return {string}
 */
proto.internal.Profile.prototype.getGroupUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.setGroupUuid = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearGroupUuid = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Profile.prototype.hasGroupUuid = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool is_group_admin = 9;
 * @return {boolean}
 */
proto.internal.Profile.prototype.getIsGroupAdmin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.setIsGroupAdmin = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearIsGroupAdmin = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Profile.prototype.hasIsGroupAdmin = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint64 last_session_timestamp = 10;
 * @return {number}
 */
proto.internal.Profile.prototype.getLastSessionTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.setLastSessionTimestamp = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearLastSessionTimestamp = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Profile.prototype.hasLastSessionTimestamp = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated Group groups = 12;
 * @return {!Array<!proto.internal.Group>}
 */
proto.internal.Profile.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.internal.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.internal.Group, 12));
};


/**
 * @param {!Array<!proto.internal.Group>} value
 * @return {!proto.internal.Profile} returns this
*/
proto.internal.Profile.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.internal.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.internal.Group}
 */
proto.internal.Profile.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.internal.Group, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};


/**
 * optional string workspace_uuid = 13;
 * @return {string}
 */
proto.internal.Profile.prototype.getWorkspaceUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.setWorkspaceUuid = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearWorkspaceUuid = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Profile.prototype.hasWorkspaceUuid = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool is_disabled = 14;
 * @return {boolean}
 */
proto.internal.Profile.prototype.getIsDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.setIsDisabled = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearIsDisabled = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Profile.prototype.hasIsDisabled = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * required EmailStatus email_status = 15;
 * @return {!proto.internal.EmailStatus}
 */
proto.internal.Profile.prototype.getEmailStatus = function() {
  return /** @type {!proto.internal.EmailStatus} */ (jspb.Message.getFieldWithDefault(this, 15, 1));
};


/**
 * @param {!proto.internal.EmailStatus} value
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.setEmailStatus = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearEmailStatus = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Profile.prototype.hasEmailStatus = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * map<string, string> ad_custom_targeting = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.internal.Profile.prototype.getAdCustomTargetingMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearAdCustomTargetingMap = function() {
  this.getAdCustomTargetingMap().clear();
  return this;};


/**
 * optional bool is_workspace_owner = 17;
 * @return {boolean}
 */
proto.internal.Profile.prototype.getIsWorkspaceOwner = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.setIsWorkspaceOwner = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Profile} returns this
 */
proto.internal.Profile.prototype.clearIsWorkspaceOwner = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Profile.prototype.hasIsWorkspaceOwner = function() {
  return jspb.Message.getField(this, 17) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupUuid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    dateCreated: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    parentGroupUuid: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.Group}
 */
proto.internal.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.Group;
  return proto.internal.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.Group}
 */
proto.internal.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDateCreated(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentGroupUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * required string group_uuid = 1;
 * @return {string}
 */
proto.internal.Group.prototype.getGroupUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Group} returns this
 */
proto.internal.Group.prototype.setGroupUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Group} returns this
 */
proto.internal.Group.prototype.clearGroupUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Group.prototype.hasGroupUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string name = 2;
 * @return {string}
 */
proto.internal.Group.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Group} returns this
 */
proto.internal.Group.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Group} returns this
 */
proto.internal.Group.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Group.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 date_created = 3;
 * @return {number}
 */
proto.internal.Group.prototype.getDateCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.internal.Group} returns this
 */
proto.internal.Group.prototype.setDateCreated = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Group} returns this
 */
proto.internal.Group.prototype.clearDateCreated = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Group.prototype.hasDateCreated = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string parent_group_uuid = 5;
 * @return {string}
 */
proto.internal.Group.prototype.getParentGroupUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.Group} returns this
 */
proto.internal.Group.prototype.setParentGroupUuid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.Group} returns this
 */
proto.internal.Group.prototype.clearParentGroupUuid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.Group.prototype.hasParentGroupUuid = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.ReactionCategory.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.ReactionCategory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.ReactionCategory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.ReactionCategory.toObject = function(includeInstance, msg) {
  var f, obj = {
    categoryName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    reactions: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.ReactionCategory}
 */
proto.internal.ReactionCategory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.ReactionCategory;
  return proto.internal.ReactionCategory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.ReactionCategory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.ReactionCategory}
 */
proto.internal.ReactionCategory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategoryName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.ReactionCategory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.ReactionCategory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.ReactionCategory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.ReactionCategory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string category_name = 1;
 * @return {string}
 */
proto.internal.ReactionCategory.prototype.getCategoryName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.ReactionCategory} returns this
 */
proto.internal.ReactionCategory.prototype.setCategoryName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.ReactionCategory} returns this
 */
proto.internal.ReactionCategory.prototype.clearCategoryName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.ReactionCategory.prototype.hasCategoryName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string reactions = 2;
 * @return {string}
 */
proto.internal.ReactionCategory.prototype.getReactions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.ReactionCategory} returns this
 */
proto.internal.ReactionCategory.prototype.setReactions = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.ReactionCategory} returns this
 */
proto.internal.ReactionCategory.prototype.clearReactions = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.ReactionCategory.prototype.hasReactions = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.internal.ReactionSet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.ReactionSet.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.ReactionSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.ReactionSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.ReactionSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    defaultReactions: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    reactionCategoriesList: jspb.Message.toObjectList(msg.getReactionCategoriesList(),
    proto.internal.ReactionCategory.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.ReactionSet}
 */
proto.internal.ReactionSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.ReactionSet;
  return proto.internal.ReactionSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.ReactionSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.ReactionSet}
 */
proto.internal.ReactionSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultReactions(value);
      break;
    case 2:
      var value = new proto.internal.ReactionCategory;
      reader.readMessage(value,proto.internal.ReactionCategory.deserializeBinaryFromReader);
      msg.addReactionCategories(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.ReactionSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.ReactionSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.ReactionSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.ReactionSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReactionCategoriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.internal.ReactionCategory.serializeBinaryToWriter
    );
  }
};


/**
 * required string default_reactions = 1;
 * @return {string}
 */
proto.internal.ReactionSet.prototype.getDefaultReactions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.ReactionSet} returns this
 */
proto.internal.ReactionSet.prototype.setDefaultReactions = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.ReactionSet} returns this
 */
proto.internal.ReactionSet.prototype.clearDefaultReactions = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.ReactionSet.prototype.hasDefaultReactions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ReactionCategory reaction_categories = 2;
 * @return {!Array<!proto.internal.ReactionCategory>}
 */
proto.internal.ReactionSet.prototype.getReactionCategoriesList = function() {
  return /** @type{!Array<!proto.internal.ReactionCategory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.internal.ReactionCategory, 2));
};


/**
 * @param {!Array<!proto.internal.ReactionCategory>} value
 * @return {!proto.internal.ReactionSet} returns this
*/
proto.internal.ReactionSet.prototype.setReactionCategoriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.internal.ReactionCategory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.internal.ReactionCategory}
 */
proto.internal.ReactionSet.prototype.addReactionCategories = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.internal.ReactionCategory, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.internal.ReactionSet} returns this
 */
proto.internal.ReactionSet.prototype.clearReactionCategoriesList = function() {
  return this.setReactionCategoriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.LegalUrls.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.LegalUrls.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.LegalUrls} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.LegalUrls.toObject = function(includeInstance, msg) {
  var f, obj = {
    termsOfUseUrl: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    usageGuidelinesUrl: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    privacyPolicyUrl: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.LegalUrls}
 */
proto.internal.LegalUrls.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.LegalUrls;
  return proto.internal.LegalUrls.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.LegalUrls} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.LegalUrls}
 */
proto.internal.LegalUrls.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTermsOfUseUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsageGuidelinesUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivacyPolicyUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.LegalUrls.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.LegalUrls.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.LegalUrls} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.LegalUrls.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string terms_of_use_url = 1;
 * @return {string}
 */
proto.internal.LegalUrls.prototype.getTermsOfUseUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.LegalUrls} returns this
 */
proto.internal.LegalUrls.prototype.setTermsOfUseUrl = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.LegalUrls} returns this
 */
proto.internal.LegalUrls.prototype.clearTermsOfUseUrl = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.LegalUrls.prototype.hasTermsOfUseUrl = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string usage_guidelines_url = 2;
 * @return {string}
 */
proto.internal.LegalUrls.prototype.getUsageGuidelinesUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.LegalUrls} returns this
 */
proto.internal.LegalUrls.prototype.setUsageGuidelinesUrl = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.LegalUrls} returns this
 */
proto.internal.LegalUrls.prototype.clearUsageGuidelinesUrl = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.LegalUrls.prototype.hasUsageGuidelinesUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string privacy_policy_url = 3;
 * @return {string}
 */
proto.internal.LegalUrls.prototype.getPrivacyPolicyUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.LegalUrls} returns this
 */
proto.internal.LegalUrls.prototype.setPrivacyPolicyUrl = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.LegalUrls} returns this
 */
proto.internal.LegalUrls.prototype.clearPrivacyPolicyUrl = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.LegalUrls.prototype.hasPrivacyPolicyUrl = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.internal.UserAlert.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.UserAlert.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.UserAlert.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.UserAlert} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.UserAlert.toObject = function(includeInstance, msg) {
  var f, obj = {
    userAlertUuid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    title: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    body: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    userAlertButtonsList: jspb.Message.toObjectList(msg.getUserAlertButtonsList(),
    proto.internal.UserAlertButton.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.UserAlert}
 */
proto.internal.UserAlert.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.UserAlert;
  return proto.internal.UserAlert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.UserAlert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.UserAlert}
 */
proto.internal.UserAlert.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAlertUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 4:
      var value = new proto.internal.UserAlertButton;
      reader.readMessage(value,proto.internal.UserAlertButton.deserializeBinaryFromReader);
      msg.addUserAlertButtons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.UserAlert.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.UserAlert.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.UserAlert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.UserAlert.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserAlertButtonsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.internal.UserAlertButton.serializeBinaryToWriter
    );
  }
};


/**
 * required string user_alert_uuid = 1;
 * @return {string}
 */
proto.internal.UserAlert.prototype.getUserAlertUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.UserAlert} returns this
 */
proto.internal.UserAlert.prototype.setUserAlertUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.UserAlert} returns this
 */
proto.internal.UserAlert.prototype.clearUserAlertUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.UserAlert.prototype.hasUserAlertUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.internal.UserAlert.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.UserAlert} returns this
 */
proto.internal.UserAlert.prototype.setTitle = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.UserAlert} returns this
 */
proto.internal.UserAlert.prototype.clearTitle = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.UserAlert.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string body = 3;
 * @return {string}
 */
proto.internal.UserAlert.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.UserAlert} returns this
 */
proto.internal.UserAlert.prototype.setBody = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.UserAlert} returns this
 */
proto.internal.UserAlert.prototype.clearBody = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.UserAlert.prototype.hasBody = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated UserAlertButton user_alert_buttons = 4;
 * @return {!Array<!proto.internal.UserAlertButton>}
 */
proto.internal.UserAlert.prototype.getUserAlertButtonsList = function() {
  return /** @type{!Array<!proto.internal.UserAlertButton>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.internal.UserAlertButton, 4));
};


/**
 * @param {!Array<!proto.internal.UserAlertButton>} value
 * @return {!proto.internal.UserAlert} returns this
*/
proto.internal.UserAlert.prototype.setUserAlertButtonsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.internal.UserAlertButton=} opt_value
 * @param {number=} opt_index
 * @return {!proto.internal.UserAlertButton}
 */
proto.internal.UserAlert.prototype.addUserAlertButtons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.internal.UserAlertButton, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.internal.UserAlert} returns this
 */
proto.internal.UserAlert.prototype.clearUserAlertButtonsList = function() {
  return this.setUserAlertButtonsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.UserAlertButton.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.UserAlertButton.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.UserAlertButton} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.UserAlertButton.toObject = function(includeInstance, msg) {
  var f, obj = {
    buttonText: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    buttonAction: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.UserAlertButton}
 */
proto.internal.UserAlertButton.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.UserAlertButton;
  return proto.internal.UserAlertButton.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.UserAlertButton} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.UserAlertButton}
 */
proto.internal.UserAlertButton.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setButtonText(value);
      break;
    case 2:
      var value = /** @type {!proto.internal.UserAlertButtonAction} */ (reader.readEnum());
      msg.setButtonAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.UserAlertButton.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.UserAlertButton.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.UserAlertButton} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.UserAlertButton.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.internal.UserAlertButtonAction} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * required string button_text = 1;
 * @return {string}
 */
proto.internal.UserAlertButton.prototype.getButtonText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.internal.UserAlertButton} returns this
 */
proto.internal.UserAlertButton.prototype.setButtonText = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.UserAlertButton} returns this
 */
proto.internal.UserAlertButton.prototype.clearButtonText = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.UserAlertButton.prototype.hasButtonText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required UserAlertButtonAction button_action = 2;
 * @return {!proto.internal.UserAlertButtonAction}
 */
proto.internal.UserAlertButton.prototype.getButtonAction = function() {
  return /** @type {!proto.internal.UserAlertButtonAction} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.internal.UserAlertButtonAction} value
 * @return {!proto.internal.UserAlertButton} returns this
 */
proto.internal.UserAlertButton.prototype.setButtonAction = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.UserAlertButton} returns this
 */
proto.internal.UserAlertButton.prototype.clearButtonAction = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.UserAlertButton.prototype.hasButtonAction = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.HelloRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.HelloRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.HelloRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.HelloRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.HelloRequest}
 */
proto.internal.HelloRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.HelloRequest;
  return proto.internal.HelloRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.HelloRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.HelloRequest}
 */
proto.internal.HelloRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.HelloRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.HelloRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.HelloRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.HelloRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.internal.HelloResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.internal.HelloResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.internal.HelloResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.HelloResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusCode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.internal.HelloResponse}
 */
proto.internal.HelloResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.internal.HelloResponse;
  return proto.internal.HelloResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.internal.HelloResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.internal.HelloResponse}
 */
proto.internal.HelloResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.internal.StatusCode} */ (reader.readEnum());
      msg.setStatusCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.internal.HelloResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.internal.HelloResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.internal.HelloResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.internal.HelloResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.internal.StatusCode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * required StatusCode status_code = 1;
 * @return {!proto.internal.StatusCode}
 */
proto.internal.HelloResponse.prototype.getStatusCode = function() {
  return /** @type {!proto.internal.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.internal.StatusCode} value
 * @return {!proto.internal.HelloResponse} returns this
 */
proto.internal.HelloResponse.prototype.setStatusCode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.internal.HelloResponse} returns this
 */
proto.internal.HelloResponse.prototype.clearStatusCode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.internal.HelloResponse.prototype.hasStatusCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.internal.SchemaVersion = {
  CURRENT_SCHEMA_VERSION: 1080
};

/**
 * @enum {number}
 */
proto.internal.AuthType = {
  PASSWORD: 1,
  FACEBOOK_TOKEN: 2,
  GOOGLE_TOKEN: 3,
  APPLE_TOKEN: 4,
  MICROSOFT_TOKEN: 5
};

/**
 * @enum {number}
 */
proto.internal.EmailStatus = {
  UNVERIFIED: 1,
  VERIFIED: 2,
  INVALID: 3
};

/**
 * @enum {number}
 */
proto.internal.UserAlertButtonAction = {
  CLOSE: 1,
  EDIT_PROFILE: 2,
  APP_STORE: 3,
  CONTACT_SUPPORT: 4
};

/**
 * @enum {number}
 */
proto.internal.VideoResolution = {
  VIDEO_720P: 1,
  VIDEO_1080P: 2
};

/**
 * @enum {number}
 */
proto.internal.FileType = {
  ZIP: 1,
  EXCEL: 2
};

/**
 * @enum {number}
 */
proto.internal.StatusCode = {
  UNKNOWN_STATUS: 0,
  SUCCESS: 1,
  NOT_MODIFIED: 100,
  BAD_REQUEST: 101,
  NOT_FOUND: 102,
  FORBIDDEN: 103,
  ACCOUNT_EXISTS: 200,
  INVALID_AUTH: 201,
  NO_PASSWORD_SET: 202,
  ACCOUNT_SUSPENDED: 203,
  UNACCEPTABLE_PASSWORD: 205,
  CONSENT_REQUIRED: 206,
  SSO_AUTH_REQUIRED_MICROSOFT: 207,
  SSO_AUTH_REQUIRED_GOOGLE: 208,
  AUTH_OTP_REQUIRED: 209,
  AUTH_EXPIRED: 210,
  INVALID_OTP: 211,
  UNACCEPTABLE_DOMAIN: 300,
  BAD_WORKSPACE: 301,
  ADDED_TO_WORKSPACE: 302,
  WEB_ACCESS_DENIED: 303,
  DUPLICATE_CIRCLE_TITLE: 304,
  DUPLICATE_CIRCLE_INTERNAL_ID: 305
};

//COMMENTED BY PHOTOCIRCLE
//goog.object.extend(exports, proto.internal);
