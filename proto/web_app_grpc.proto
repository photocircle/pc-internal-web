syntax = "proto2";
package grpc_web;

/*********************
 * Common structures *
 *********************/

// These are messages that are used in different services and in various RPCs
// They roughly correspond to data stored in the the database.

// Pass this value in the pc-schema-version header.
enum SchemaVersion { CURRENT_SCHEMA_VERSION = 1068; } // DO NOT MANUALLY EDIT!

message Branding {
  required string header_background_color = 1;
  required string primary_color = 2;
  required string logo_url = 3;
  optional string action_url = 4; // tapping on logo opens this url
}

message CirclePermissions {
  required bool can_add_media = 1;
  required bool can_view_comments = 2;
  required bool can_add_comments = 3;
  required bool can_view_reactions = 4;
  required bool can_add_reaction = 5;
  required bool can_view_members_list = 6;
  required bool can_invite_members = 7;
  required bool can_delete_circle = 8;
  required bool can_leave_circle = 9;
  required bool can_remove_members = 10;
  required bool can_update_title = 12;
  required bool can_share_web_album = 13;
  required bool can_save_individual_media = 14;
  required bool can_save_all_to_library = 15;
  required bool can_share_media = 16;
  required bool can_set_circle_cover = 17;
  required bool can_remove_other_media = 18;
  required bool can_remove_other_comments = 19;
  required bool can_view_dates = 20;
  required bool can_update_other_caption = 21;
  required bool can_reorder_media = 22;
  required bool can_unblock_users = 23;
  required bool can_download_zip = 24;
  required bool can_download_excel = 25;
  required bool can_inactivate_membership = 26;
}

message CircleConfig {
  required bool enable_ads = 1;
  required uint32 max_video_length = 2; // max in seconds
  required bool enable_event_tracking = 3;
  optional Branding branding = 4;
  required uint32 default_video_selection_length = 5; // default selection length in seconds for trimmer
  required uint32 minimum_video_length_for_trim = 6; // minimum in seconds to trigger display of the trimmer
  optional ReactionSet reaction_set = 7; // optional override of global reaction set
  optional uint32 max_photo_dimension = 8;
  optional VideoResolution video_resolution = 9;
  optional uint32 video_bitrate_kbps = 10;
  repeated Role roles = 11; // list of all roles that exist for this Circle; should be displayed in this order in Member List
}

// Data about a circle and its creator.
message Circle {
  required string circle_uuid = 1; // also known as item_uuid
  required string title = 2;
  required uint64 date_created_timestamp = 4; // epoch microseconds
  optional string cover_photo_media_uuid = 5; // the photo to show on the main screen (optional)
  optional string group_uuid = 7;
  optional uint64 last_activity_timestamp = 10;
  optional string internal_id = 11;
  optional string workspace_uuid = 12;
  optional string last_media_uuid = 13; // last media added to the circle; only available for workspace circles
}

message Role {
  required uint32 role_id = 1; //stable role ID
  required string name = 2;
  optional string description = 3;
  optional uint32 icon_id = 4; // ID of Role Icon; 1=Moderator, 2=Contributor, 4=Guest in asset bundle
  optional bytes icon_bytes = 5; // PNG bytes for the Role Icon; Message will include icon_id OR icon_bytes
}

// A member of a circle.
message CircleMember {
  required string member_uuid = 1; // also known as item_uuid
  optional string user_uuid = 2; // used for matching against user profile, and to match members across circles
  required string circle_uuid = 3;
  required uint64 last_updated_timestamp = 4; // epoch microseconds
  required string display_name = 5;
  optional string avatar_url = 6;
  optional string invited_by_member_uuid = 7;
  required uint64 date_joined_timestamp = 8; // epoch microseconds
  optional uint64 last_session_timestamp = 11; //  epoch microseconds TODO: Remove this since it'll be hidden behind admin call
  required bool is_active = 12; // This will be False if a workspace member leaves, as they can always rejoin
  required bool is_removable = 14; // If False, then Moderator can't remove this member from the circle
  required bool is_workspace_member = 15;
  required uint32 role_id = 16; // lookup role_id in CircleConfig roles
  repeated uint32 target_role_ids = 17; // exists when active member can change the role of this member; when showing change dialog, use this ordering
}

message CircleMembershipConfig {
  required string circle_uuid = 1;
  required string member_uuid = 2;
  optional CirclePermissions permissions = 3;
  optional CircleConfig config = 4;
}

// A photo or video posted within a circle.
message Media {
  required string media_uuid = 1;
  required string circle_uuid = 2;
  required bool is_video = 3;
  required string added_by_member_uuid = 4; // member who added post
  required uint64 date_added_timestamp = 5; // epoch microseconds
  optional string caption = 6;
  optional bytes preview_data = 7; // image data used for blurred thumbnail.
  // used for determining album order. in general, media should be sorted by
  // this key in descending order.
  required int64 sort_key = 8; // for now, value may range from [0, (2^32)-1]. that is, only 32 bits are used.
  // Remove stream_id at index 9
}

// A comment added to a media post.
message MediaComment {
  required string comment_uuid = 1; // also known as item_uuid
  required string media_uuid = 2;
  required string added_by_member_uuid = 3;
  required string comment_text = 4;
  required uint64 date_added_timestamp = 5; // epoch microseconds
}

// A reaction added to a media post
message MediaReaction {
  required string media_uuid = 1;
  required string added_by_member_uuid = 2;
  required string reaction_text = 3; // empty string removes existing reaction; currently 1 character allowed for reaction; use 1st character if more than one
  required uint64 date_modified_timestamp = 4; // epoch microseconds
}

// Auth flows associated with a user
enum AuthType {
  PASSWORD = 1;
  FACEBOOK_TOKEN = 2;
  GOOGLE_TOKEN = 3;
  APPLE_TOKEN = 4;
  MICROSOFT_TOKEN = 5;
}

enum EmailStatus {
  UNVERIFIED = 1;
  VERIFIED = 2;
  INVALID = 3;
}

// Data for a user. Used for currently logged in user and for administration.
message Profile {
  required string user_uuid = 1;
  required uint64 last_updated_timestamp = 2; // epoch microseconds
  required string display_name = 3;
  optional string email = 4;
  optional string avatar_url = 5;
  repeated AuthType auth_types = 6;
  required uint64 account_creation_timestamp = 7; // epoch microseconds
  optional string group_uuid = 8;
  optional bool is_group_admin = 9;
  optional uint64 last_session_timestamp = 10; //  epoch microseconds
  repeated Group groups = 12;
  optional string workspace_uuid = 13;
  optional bool is_disabled = 14;
  required EmailStatus email_status = 15;
  map<string, string> ad_custom_targeting = 16;
  optional bool is_workspace_owner = 17;
}

// Information about a group of users (used for administration)
message Group {
  required string group_uuid = 1;
  required string name = 2;
  required uint64 date_created = 3; // epoch microseconds
  optional string parent_group_uuid = 5;
}

message ReactionCategory {
  optional string category_name = 1; // don't include category header if null
  required string reactions = 2; // string contains all the emojis for this category
}

message ReactionSet {
  required string default_reactions = 1; // string contains all the default reactions; max of 7
  repeated ReactionCategory reaction_categories = 2;
}

message LegalUrls {
  optional string terms_of_use_url = 1;
  optional string usage_guidelines_url = 2;
  optional string privacy_policy_url = 3;
}

message UserAlert {
  required string user_alert_uuid = 1; // unique UUID string for the alert
  optional string title = 2;
  required string body = 3;
  repeated UserAlertButton user_alert_buttons = 4; // one or more buttons for the alert
}

message UserAlertButton {
  required string button_text = 1;
  required UserAlertButtonAction button_action = 2;
}

enum UserAlertButtonAction {
  CLOSE = 1; // Simply close the alert dialog; no action
  EDIT_PROFILE = 2; // Open the Edit Profile screen
  APP_STORE = 3; // Open the Apple App Store or Google Play Store for PhotoCircle
  CONTACT_SUPPORT = 4; // Open new Helpshift Support Conversation
}

enum VideoResolution {
  VIDEO_720P = 1;
  VIDEO_1080P = 2;
}

enum FileType {
  ZIP = 1;
  EXCEL = 2;
}

// Possible status codes used in responses.
enum StatusCode {
  UNKNOWN_STATUS = 0;
  SUCCESS = 1;

  NOT_MODIFIED = 100;
  BAD_REQUEST = 101;
  NOT_FOUND = 102;
  FORBIDDEN = 103;

  ACCOUNT_EXISTS = 200;
  INVALID_AUTH = 201;
  NO_PASSWORD_SET = 202;
  ACCOUNT_SUSPENDED = 203;
  UNACCEPTABLE_PASSWORD = 205;
  CONSENT_REQUIRED = 206;
  SSO_AUTH_REQUIRED_MICROSOFT = 207;
  SSO_AUTH_REQUIRED_GOOGLE = 208;
  AUTH_OTP_REQUIRED = 209;
  AUTH_EXPIRED = 210;
  INVALID_OTP = 211;

  UNACCEPTABLE_DOMAIN = 300;
  BAD_WORKSPACE = 301;
  ADDED_TO_WORKSPACE = 302;
  WEB_ACCESS_DENIED = 303;
  DUPLICATE_CIRCLE_TITLE = 304;
  DUPLICATE_CIRCLE_INTERNAL_ID = 305;
}

// The following are the “core” status codes that the client should support from all responses:
//  SUCCESS - This is pretty obvious; the request was successful
//  BAD_REQUEST - Client failed to validate (e.g., empty field, malformed UUID, email without an @ symbol)
//                The data is somehow bad. The backend will report all of these to Sentry and provide details to
//                client developers when this happens, so that future builds will address the issue.
//  NOT_FOUND - Something doesn't exist on the backend (e.g., member, circle, media, comment).
//              In most cases, this is a race condition, where item has recently been deleted and client is not yet aware.
//              For the case of Authentication, this is more specific (e.g., account not found).
//  FORBIDDEN - In most cases, the client will have up-to-date permissions for can_*.
//              However, there may be cases where there is a new permission that is not provided to the client.
//              In such a case, the client should handle this with a generic alert to the user.

service PhotoCircleWeb {
  /**
   * Authentication RPCs
   * These can be made without authentication metadata
   * Internally, they set a cookie in the headers to set auth status in the browser
   */
  rpc LoginWithEmailPassword(LoginWithEmailPasswordRequest) returns (AuthenticationResponse) {}
  rpc LoginWithToken(LoginWithTokenRequest) returns (AuthenticationResponse) {}
  rpc Register(RegisterRequest) returns (AuthenticationResponse) {}
  rpc ForgotPassword(ForgotPasswordRequest) returns (ForgotPasswordResponse) {}
  rpc Logout(LogoutRequest) returns (LogoutResponse) {}
  rpc GetJoinPageData(GetJoinPageDataRequest) returns (GetJoinPageDataResponse) {}

  /**
   * Data retrieval RPCs
   * These are used to return data about the user's account and content
   */
  rpc GetCurrentUserInfo(GetCurrentUserInfoRequest) returns (GetCurrentUserInfoResponse) {}
  /// Circle data:
  // Returns the circles for a user. If no user is specified, the circles for the calling user are returned.
  rpc GetCircles(GetCirclesRequest) returns (GetCirclesResponse) {}
  rpc GetCircleData(GetCircleDataRequest) returns (GetCircleDataResponse) {}
  rpc GetReactionsForMedia(GetReactionsForMediaRequest) returns (GetReactionsForMediaResponse) {}
  rpc GetCommentsForMedia(GetCommentsForMediaRequest) returns (GetCommentsForMediaResponse) {}
  rpc GetInvite(GetInviteRequest) returns (GetInviteResponse) {}
  rpc GetInviteInformation(GetInviteInformationRequest) returns (GetInviteInformationResponse) {}
  rpc GetCircleDownloadURL(GetCircleDownloadURLRequest) returns (GetCircleDownloadURLResponse) {}

  /// Group related data:
  // Get the circles associated with a given group
  rpc GetGroupCircles(GetGroupCirclesRequest) returns (GetGroupCirclesResponse) {}
  // For users who belong to a workspace, this returns the groups in their group family
  rpc GetViewableGroups(GetViewableGroupsRequest) returns (GetViewableGroupsResponse) {}

  /**
   * Circle mutating RPCs
   * Change content and circle data in the database
   */
  rpc CreateCircle(CreateCircleRequest) returns (CreateCircleResponse) {}
  rpc AddComment(AddCommentRequest) returns (AddCommentResponse) {}
  rpc RemoveComment(RemoveCommentRequest) returns (RemoveCommentResponse) {}
  rpc RemoveMember(RemoveMemberRequest) returns (RemoveMemberResponse) {}
  rpc UpdateCircleTitle(UpdateCircleTitleRequest) returns (UpdateCircleTitleResponse) {}
  rpc RemoveMedia(RemoveMediaRequest) returns (RemoveMediaResponse) {}
  rpc RemoveMediaBatch(RemoveMediaBatchRequest) returns (RemoveMediaBatchResponse) {}
  rpc ReorderCircleMedia(ReorderCircleMediaRequest) returns (ReorderCircleMediaResponse) {}
  rpc UpdateMediaCaption(UpdateMediaCaptionRequest) returns (UpdateMediaCaptionResponse) {}
  rpc SetReaction(SetReactionRequest) returns (SetReactionResponse) {}
  rpc SetCircleCoverPhoto(SetCircleCoverPhotoRequest) returns (SetCircleCoverPhotoResponse) {}
  rpc SetCirclePushPreference(SetCirclePushPreferenceRequest) returns (SetCirclePushPreferenceResponse) {}

  /**
   * User mutating RPCs
   * Related to modifying accounts and circle memberships
   */
  rpc JoinGroupCircle(JoinGroupCircleRequest) returns (JoinGroupCircleResponse) {}
  rpc JoinCircleByShareCode(JoinCircleByShareCodeRequest) returns (JoinCircleByShareCodeResponse) {}
  rpc JoinCircleByInviteCode(JoinCircleByInviteCodeRequest) returns (JoinCircleByInviteCodeResponse) {}
  rpc LeaveCircle(LeaveCircleRequest) returns (LeaveCircleResponse) {}
  rpc InactivateMembership(InactivateMembershipRequest) returns (InactivateMembershipResponse) {}
  rpc DeleteCircle(DeleteCircleRequest) returns (DeleteCircleResponse) {}
  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse) {}

  /**
   * Workspace management RPCs
   * For group administrators, these can be used to manage groups, circles, and users
   */
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {}
  rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse) {}
  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {}
  rpc AdminGetUser(AdminGetUserRequest) returns (AdminGetUserResponse) {}
  rpc AdminUpdateUser(AdminUpdateUserRequest) returns (AdminUpdateUserResponse) {}
  rpc DisableUser(DisableUserRequest) returns (DisableUserResponse) {}
  rpc EnableUser(EnableUserRequest) returns (EnableUserResponse) {}
  rpc PromoteAdmin(PromoteAdminRequest) returns (PromoteAdminResponse) {}
  rpc DemoteAdmin(DemoteAdminRequest) returns (DemoteAdminResponse) {}
  rpc ChangeMemberRole(ChangeMemberRoleRequest) returns (ChangeMemberRoleResponse) {}
  rpc ForceUserLogout(ForceUserLogoutRequest) returns (ForceUserLogoutResponse) {}
  // Retrieve circle information along with extended metadata
  rpc AdminGetCircle(AdminGetCircleRequest) returns (AdminGetCircleResponse) {}
  rpc AdminUpdateCircle(AdminUpdateCircleRequest) returns (AdminUpdateCircleResponse) {}
  // Called by Admins to get information about the Workspace
  rpc GetWorkspace(GetWorkspaceRequest) returns (GetWorkspaceResponse) {}
  rpc InviteToWorkspace(InviteToWorkspaceRequest) returns (InviteToWorkspaceResponse) {}
  rpc GetWorkspaceSettings(GetWorkspaceSettingsRequest) returns (GetWorkspaceSettingsResponse) {}
  rpc GetStripeDashboardUrl(GetStripeDashboardUrlRequest) returns (GetStripeDashboardUrlResponse) {}
  rpc UpdateWorkspaceSettings(UpdateWorkspaceSettingsRequest) returns (UpdateWorkspaceSettingsResponse) {}
  rpc GetWorkspacePermissions(GetWorkspacePermissionsRequest) returns (WorkspacePermissionsResponse) {}
  rpc UpdateWorkspacePermissions(UpdateWorkspacePermissionsRequest) returns (WorkspacePermissionsResponse) {}
  rpc GetWorkspaceBranding(GetWorkspaceBrandingRequest) returns (WorkspaceBrandingResponse) {}
  rpc UpdateWorkspaceBranding(UpdateWorkspaceBrandingRequest) returns (WorkspaceBrandingResponse) {}
  rpc GetWorkspaceDomains(GetWorkspaceDomainsRequest) returns (WorkspaceDomainResponse) {}
  rpc UpsertWorkspaceDomain(UpsertWorkspaceDomainRequest) returns (WorkspaceDomainResponse) {}
  rpc RemoveWorkspaceDomain(RemoveWorkspaceDomainRequest) returns (WorkspaceDomainResponse) {}
  rpc UpdateWorkspaceDomainSettings(UpdateWorkspaceDomainSettingsRequest) returns (WorkspaceDomainResponse) {}
  rpc GetWorkspaceSeatCount(GetWorkspaceSeatCountRequest) returns (GetWorkspaceSeatCountResponse) {}
}

/***********************
 * Response structures *
 ***********************/

// Extended circle information for admins
message CircleMetadata {
  required string circle_uuid = 1;
  required string title = 2;
  required uint32 media_count = 3;
  required uint32 member_count = 4;
  optional uint64 last_activity_timestamp = 5; // epoch microseconds
  // For AdminGetUser, this is the membership type of the requested user within the circle.
  // For AdminGetCircle, this is unset
  optional string internal_id = 7;
  optional string group_uuid = 8;
  // For AdminGetUser, this is the member_uuid of the requested user within the circle.
  optional string member_uuid = 9;
  optional string workspace_uuid = 10;
  repeated Role roles = 12; // list of all roles that exist for this Circle; should be displayed in this order in Member List
  optional uint32 role_id = 11; // lookup role_id in CircleConfig roles
  repeated uint32 target_role_ids = 17; // exists when admin can change the role of this member; when showing change dialog, use this ordering
}

// Extended member information for admins
message MemberMetadata {
  required string display_name = 1;
  required uint32 media_count = 3;
  optional uint64 last_session_timestamp = 4; // epoch microseconds
  required bool is_workspace_member = 5;
  optional string avatar_url = 6;
  required string member_uuid = 7;
  required string user_uuid = 8;
  required bool is_active = 9;
  required uint32 role_id = 10; // lookup role_id in CircleConfig roles
  repeated uint32 target_role_ids = 11; // exists when admin can change the role of this member; when showing change dialog, use this ordering
}

/*****************
 * Standard RPCs *
 *****************/

// Register a new account using email and password
message RegisterRequest {
  required string email = 1;
  required string password = 2;
  required string display_name = 3; // Truncated after 25 characters
  optional string otp_code = 4; // one-time passcode
}

// Login using email and password
message LoginWithEmailPasswordRequest {
  required string email = 1;
  required string password = 2;
  optional string otp_code = 3; // one-time passcode
}

// Auth providers for LoginWithToken
// Note: The values match the mobile API for now
enum TokenType {
  GOOGLE = 2;
  APPLE = 3;
  MICROSOFT = 4;
}

// A new PhotoCircle account will be created if one doesn't exist.
message LoginWithTokenRequest {
  required TokenType token_type = 1;
  required string token = 2;
  required bool create_new_account = 3;
  optional string otp_code = 4; // one-time passcode
  optional string display_name = 5; // set when using Apple authentication
}

// Account data from authentication.
// Possible status codes:
//  SUCCESS
//  NOT_FOUND - An associated account doesn't exist
//  AUTH_OTP_REQUIRED - OTP code sent to user via email for verification
//  INVALID_OTP - OTP code is not correct
//  AUTH_EXPIRED - SSO auth token has expired
//  ACCOUNT_EXISTS - Registration failed due to account existing
//  BAD_REQUEST - Email, password, or reset token was malformed
//  INVALID_AUTH - Provided auth details were invalid
//  NO_PASSWORD_SET - The account does not have a password
//  UNACCEPTABLE_PASSWORD - The supplied password for registration was not long enough, or otherwise unacceptable
//  FORBIDDEN - This user is not allowed to sign up, because of their domain. They must be invited by admin
//  ACCOUNT_SUSPENDED - The account exists, but has been banned (because of law enforcement investigation or other support issue)
message AuthenticationResponse {
  required StatusCode status_code = 1;
  optional Profile user_profile = 2;
}

// Request account recovery.
message ForgotPasswordRequest {
  required string email = 1;
}

// Status codes:
//  SUCCESS - Recovery email sent
//  BAD_REQUEST - Email is not valid
//  NOT_FOUND - No existing account found for the email address
//  SSO_AUTH_REQUIRED_MICROSOFT - User must user SSO to sign in/up with Microsoft
//  SSO_AUTH_REQUIRED_GOOGLE - User must user SSO to sign in/up with Google
message ForgotPasswordResponse {
  required StatusCode status_code = 1;
}

message LogoutRequest {}

message LogoutResponse {
  required StatusCode status_code = 1;
}

message GetJoinPageDataRequest {
  required string invite_code = 1;
}

// Possible status codes:
//  NOT_FOUND - The invite wasn't found
message GetJoinPageDataResponse {
  required StatusCode status_code = 1;
  optional string circle_title = 2;
  optional string circle_description = 3; // e.g. "12 Members, 81 Photos & Videos"
  optional string inviter_name = 4;
  optional string inviter_avatar_url = 5;
  repeated string media_uuids = 6;
  optional string circle_workspace_uuid = 7;
  optional string circle_web_app_url = 8;
}

// Possible status codes:
//  NOT_FOUND - The invite wasn't found
message SendJoinLinkToPhoneResponse {
  required StatusCode status_code = 1;
}

// Receive the `Profile` data for the current user.
message GetCurrentUserInfoRequest {
}

message AppConfig {
  required bool internal_ids_enabled = 1;
  optional string internal_id_short_hint = 2;
  optional string internal_id_long_hint = 3;
  optional string internal_id_regex_validator = 4;
  required ReactionSet reaction_set = 5;
}

message GetCurrentUserInfoResponse {
  required StatusCode status_code = 1;
  optional Profile updated_profile = 2;
  optional AppConfig app_config = 3;
}

message GetCirclesRequest {
}

message GetCirclesResponse {
  required StatusCode status_code = 1;
  repeated Circle circles = 2;
}

message GetCircleDataRequest {
  required string circle_uuid = 1;
}

// Possible status codes:
//  NOT_FOUND - The circle doesn't exist
//  FORBIDDEN - The calling user doesn't have permission to view information about this circle
message GetCircleDataResponse {
  required StatusCode status_code = 1;
  repeated CircleMember members = 2;
  repeated Media media = 3;
  optional CirclePermissions permissions = 4;
  optional CircleConfig config = 5;
  optional CircleMembershipConfig circle_membership_config = 6; // Note: This can be null if the calling user is not a member of the circle
  optional string group_uuid = 7;
}

message GetReactionsForMediaRequest {
  required string media_uuid = 1;
}

// Possible status codes:
//  NOT_FOUND - The media doesn't exist
//  FORBIDDEN - The calling user doesn't have permission to view information about this circle
message GetReactionsForMediaResponse {
  required StatusCode status_code = 1;
  repeated MediaReaction media_reactions = 2;
}

message GetCommentsForMediaRequest {
  required string media_uuid = 1;
}

// Possible status codes:
//  NOT_FOUND - The circle doesn't exist
//  FORBIDDEN - The calling user doesn't have permission to view information about this circle
message GetCommentsForMediaResponse {
  required StatusCode status_code = 1;
  repeated MediaComment media_comments = 2;
}

// Requests an invite code and URL for the given circle.
// This is used to generate sharable links and codes among users.
message GetInviteRequest {
  required string circle_uuid = 1;
}

// Possible status codes:
//  FORBIDDEN - This user cannot invite new users to the requested circle
//  NOT_FOUND - The requested circle does not exist
message GetInviteResponse {
  required StatusCode status_code = 1;
  optional string invite_code = 2;
  optional string invite_url = 3;
}

// If the app has an invite code (e.g. during auth), it can retrieve information
message GetInviteInformationRequest {
  required string invite_code = 1;
}

// Status codes:
//  SUCCESS - invite information returned
//  NOT_FOUND - No existing invitation with that invite_code
message GetInviteInformationResponse {
  required StatusCode status_code = 1;
  optional string circle_title = 2;
  optional string preview_media_uuid = 3; // Used for retrieving preview thumbnail. Unset if circle is empty.
  optional uint32 media_count = 4; // In the range [0, (2^16)-1]
  optional uint32 member_count = 5;
  optional CircleMember inviter_member = 6;
}

message GetCircleDownloadURLRequest {
  required string circle_uuid = 1;
  required FileType file_type = 2;
  repeated string media_uuids = 3; // if empty, create zip/excel for all media, otherwise limit to these media_uuids
}

message GetCircleDownloadURLResponse {
  required StatusCode status_code = 1;
  optional string download_url = 2;
}

message GetGroupCirclesRequest {
  required string group_uuid = 1;
}

// Possible status codes:
//  FORBIDDEN - The calling user cannot read from this group
//  NOT_FOUND - The referenced group was not found
message GetGroupCirclesResponse {
  required StatusCode status_code = 1;
  repeated Circle group_circles = 2;
}

message GetViewableGroupsRequest {
}

message GetViewableGroupsResponse {
  required StatusCode status_code = 1;
  repeated Group viewable_groups = 2;
}

// Create a new circle
message CreateCircleRequest {
  required string title = 1;  // Must be non-empty
  optional string internal_id = 2;  // Only used for workspace circles
  optional string group_uuid = 3;  // Only used for workspace circles, when user has group
}

// Possible status codes:
//  FORBIDDEN - User attempted to create group circle, but does not belong to group_uuid provided, or failed to provide group_uuid
message CreateCircleResponse {
  required StatusCode status_code = 1;
  optional Circle circle = 2;
}

// Adds a comment to a photo.
message AddCommentRequest {
  required string media_uuid = 1;
  required string comment_text = 2; // Must be non-empty. Truncated after 400 characters
}

// Possible status codes:
//  FORBIDDEN - The calling user cannot make this comment
//  NOT_FOUND - The referenced media was not found
//  BAD_REQUEST - comment_text was empty
message AddCommentResponse {
  required StatusCode status_code = 1;
  optional MediaComment media_comment = 2;
}

// Removes a comment the user made.
message RemoveCommentRequest {
  required string comment_uuid = 1;
}

// Possible status codes:
//  FORBIDDEN - The calling user cannot remove this comment
//  NOT_FOUND - The comment was not found
message RemoveCommentResponse {
  required StatusCode status_code = 1;
}

// Remove a member from a circle that the calling user owns.
message RemoveMemberRequest {
  required string member_uuid = 1;
  required bool block_from_rejoining = 2;
}

// Possible status codes:
//  FORBIDDEN - This member cannot be removed by the calling user
//  NOT_FOUND - This member does not exist in this circle
message RemoveMemberResponse {
  required StatusCode status_code = 1;
}

// Change the title of a circle the user owns.
message UpdateCircleTitleRequest {
  required string circle_uuid = 1;
  required string title_text = 2; // Must be non-empty. Truncated after 50 characters
  optional string internal_id = 3;
}

// Possible status codes:
//  NOT_FOUND - The referenced circle was not found
//  FORBIDDEN - The calling user does not have permission to update this circle's title
//  BAD_REQUEST - title_text was empty
message UpdateCircleTitleResponse {
  required StatusCode status_code = 1;
  optional Circle circle = 2;
}

// Remove media. User must be the uploader, or must have `can_remove_other_media` permission.
message RemoveMediaRequest {
  required string media_uuid = 1; // Generated by client during upload
}

// Possible status codes:
//  NOT_FOUND - The referenced post does not exist.
//  FORBIDDEN - The requesting user does not have permission to remove this media.
message RemoveMediaResponse {
  required StatusCode status_code = 1;
}

// Remove media the user has permission for
message RemoveMediaBatchRequest {
  repeated string media_uuids = 1; // Generated by client during upload
}

// Status codes:
//  SUCCESS - at least one media item removed
//  BAD_REQUEST - one or more items has invalid UUID
//  NOT_FOUND - none of the media_uuid items could be found
//  FORBIDDEN - Member is not allowed to Remove any of the media items; all failed
message RemoveMediaBatchResponse {
  required StatusCode status_code = 1;
}

// media_uuids from top to bottom; operation_uuid will return in syncBlock for 60 seconds after reordering
message ReorderCircleMediaRequest {
  required string circle_uuid = 1;
  repeated string media_uuids = 2;
}

// Status codes:
//  SUCCESS - Media reordered
//  BAD_REQUEST - uuids not valid UUID format; media is not properly ordered
//  FORBIDDEN - Member is not allowed to reorder circle
message ReorderCircleMediaResponse {
  required StatusCode status_code = 1;
}

// Updates a comment on the user's photo.
message UpdateMediaCaptionRequest {
  required string media_uuid = 1;
  required string caption_text = 2; // Truncated after 200 characters
}

// Possible status codes:
//  FORBIDDEN - The calling user cannot update this media
//  NOT_FOUND - The media was not found
message UpdateMediaCaptionResponse {
  required StatusCode status_code = 1;
  optional Media media = 2;
}

// Adds a reaction to a photo/video.
// The reaction will be sent down in Sync.
message SetReactionRequest {
  required string media_uuid = 1;
  optional string reaction_text = 3; // null value removes existing reaction; currently 1 character allowed for reaction
}

// Possible status codes:
//  FORBIDDEN - The calling user cannot make this comment
//  NOT_FOUND - The referenced media was not found
//  BAD_REQUEST - reaction_text was invalid
message SetReactionResponse {
  required StatusCode status_code = 1;
  optional MediaReaction media_reaction = 2;
}

// Set the cover photo for a circle
message SetCircleCoverPhotoRequest {
  required string circle_uuid = 1;
  optional string media_uuid = 2; // null/missing value removes existing cover photo, defaulting to last added media
}

// Status codes:
//  NOT_FOUND - media_uuid or circle_uuid not found or user is not a member of the circle
//  FORBIDDEN - Member is not allowed to Set the Cover Photo
message SetCircleCoverPhotoResponse {
  required StatusCode status_code = 1;
}

// Updates push preference for a circle.
// Current use is to enable or disable push notifications for a user's circles.
message SetCirclePushPreferenceRequest {
  required string circle_uuid = 1;
  required bool push_enabled = 2;
}

// Status codes:
//  NOT_FOUND - circle_uuid not found or user is not a member of the circle
message SetCirclePushPreferenceResponse {
  required StatusCode status_code = 1;
}

message JoinGroupCircleRequest {
  required string circle_uuid = 1;
}

// Possible status codes:
//  FORBIDDEN - The user cannot join this circle. This call can only be used to join circles in the user's group family.
//  NOT_FOUND - The referenced circle was not found
//  CIRCLE_ALREADY_JOINED - The user already belongs to this circle
message JoinGroupCircleResponse {
  required StatusCode status_code = 1;
}

message JoinCircleByShareCodeRequest {
  required string share_code = 1;
}

// Possible status codes:
//  NOT_FOUND - The referenced web share does not exist
message JoinCircleByShareCodeResponse {
  required StatusCode status_code = 1;
  optional string circle_uuid = 2;
}

message JoinCircleByInviteCodeRequest {
  required string invite_code = 1;
}

// Possible status codes:
//  NOT_FOUND - The referenced invite does not exist
//  FORBIDDEN - User is banned from joining Circle
//  CIRCLE_ALREADY_JOINED - The user already belongs to this circle
message JoinCircleByInviteCodeResponse {
  required StatusCode status_code = 1;
  optional string circle_uuid = 2;
}

// Leave a circle that the user belongs to.
message LeaveCircleRequest {
  required string circle_uuid = 1;
}

// Possible status codes:
//  NOT_FOUND - This user doesn't belong to this circle, and so cannot leave
message LeaveCircleResponse {
  required StatusCode status_code = 1;
}

message InactivateMembershipRequest {
  required string circle_uuid = 1;
}

// Status codes:
//  SUCCESS - membership inactivated
//  BAD_REQUEST - circle_uuid is not valid UUID
//  NOT_FOUND - circle_uuid not found
//  FORBIDDEN - User is not allowed to inactivate membership
message InactivateMembershipResponse {
  required StatusCode status_code = 1;
}

message DeleteCircleRequest {
  required string circle_uuid = 1;
}

// Status codes:
//  NOT_FOUND - circle_uuid not found
//  FORBIDDEN - Member is not allowed to Delete Circle
message DeleteCircleResponse {
  required StatusCode status_code = 1;
}

message UpdateProfileRequest {
  optional bytes avatar_data = 1;
  optional string display_name = 2;  // Truncated after 25 characters
}

message UpdateProfileResponse {
  required StatusCode status_code = 1;
  optional Profile updated_profile = 2;
}

message CreateGroupRequest {
  required string name = 1;
  required string parent_group_uuid = 2;
}

// Possible status codes:
//  FORBIDDEN - Only Group Admins can create groups
//  NOT_FOUND - The parent group was not found.
message CreateGroupResponse {
  required StatusCode status_code = 1;
  optional Group group = 2;
}

message UpdateGroupRequest {
  required string group_uuid = 1;
  optional string name = 2;
}

// Possible status codes:
//  FORBIDDEN - Only Group Admins can change group name
//  NOT_FOUND - The group does not exist
message UpdateGroupResponse {
  required StatusCode status_code = 1;
  optional Group group = 2;
}

message DeleteGroupRequest {
  required string group_uuid = 1;
}

// Possible status codes:
//  FORBIDDEN - Only Group Admins can delete groups
//  NOT_FOUND - The group does not exist
message DeleteGroupResponse {
  required StatusCode status_code = 1;
}

message AdminGetUserRequest {
  required string user_uuid = 1;
}

// Possible status codes:
//  NOT_FOUND - The user doesn't exist
//  FORBIDDEN - The calling user doesn't have permission to view information about this user.
message AdminGetUserResponse {
  required StatusCode status_code = 1;
  optional Profile user_profile = 2;
  repeated CircleMetadata circle_metadata = 3;
  optional uint32 circle_count = 4;
  optional uint32 media_count = 5;
}

message AdminUpdateUserRequest {
  required string user_uuid = 1;
  optional string display_name = 2;
  optional string email = 3;
  optional string group_uuid = 4;
}

// Possible status codes:
//  NOT_FOUND - The user does not exist, or does not belong to the workspace.
//  FORBIDDEN - Only Group Admins can modify a user.
//  BAD_REQUEST - The provided email address doesn't look valid.
//  ACCOUNT_EXISTS - An account with that email address already exists. Not changing.
message AdminUpdateUserResponse {
  required StatusCode status_code = 1;
  optional Profile user = 2;
}

message DisableUserRequest {
  required string user_uuid = 1;
  required bool leave_circles = 2;
}

// Possible status codes:
//  FORBIDDEN - The calling user cannot disable the requested user
//  NOT_FOUND - The requested user does not exist
message DisableUserResponse {
  required StatusCode status_code = 1;
}

message EnableUserRequest {
  required string user_uuid = 1;
}

// Possible status codes:
//  FORBIDDEN - The calling user cannot enable the requested user
//  NOT_FOUND - The requested user does not exist
message EnableUserResponse {
  required StatusCode status_code = 1;
}

message PromoteAdminRequest {
  required string user_uuid = 1;
}

// Possible status codes:
//  FORBIDDEN - The calling user cannot promote the requested user
//  NOT_FOUND - The requested user does not exist
message PromoteAdminResponse {
  required StatusCode status_code = 1;
}

message DemoteAdminRequest {
  required string user_uuid = 1;
}

// Possible status codes:
//  FORBIDDEN - The calling user cannot demote the requested user
//  NOT_FOUND - The requested user does not exist
message DemoteAdminResponse {
  required StatusCode status_code = 1;
}

message ChangeMemberRoleRequest {
  required string member_uuid = 1;
  required uint32 new_role_id = 2;
}

// Status codes:
//  SUCCESS - Member Role Changed
//  BAD_REQUEST - member_uuid is not valid UUID
//  NOT_FOUND - Member not found or user is not a member of the circle
//  FORBIDDEN - User is not allowed to change Member to New Role
message ChangeMemberRoleResponse {
  required StatusCode status_code = 1;
}

message ForceUserLogoutRequest {
  required string user_uuid = 1;
}

// Possible status codes:
//  FORBIDDEN - The calling user cannot force a sign out
//  NOT_FOUND - The requested user does not exist
message ForceUserLogoutResponse {
  required StatusCode status_code = 1;
}

message AdminGetCircleRequest {
  required string circle_uuid = 1;
}

message AdminGetCircleResponse {
  required StatusCode status_code = 1;
  optional CircleMetadata circle_metadata = 2;
  repeated MemberMetadata member_metadata = 3;
}

message AdminUpdateCircleRequest {
  required string circle_uuid = 1;
  required string title = 2;
  optional string internal_id = 3;
  required string group_uuid = 4;
}

// Possible status codes:
//  FORBIDDEN - The calling user is not an admin
//  BAD_REQUEST - A field was unexpectedly empty
//  NOT_FOUND - The circle or group does not exist
message AdminUpdateCircleResponse {
  required StatusCode status_code = 1;
}

message GetWorkspaceRequest { }

// Possible status codes:
//  FORBIDDEN - The calling user is not an Admin
message GetWorkspaceResponse {
  required StatusCode status_code = 1;
  repeated Group workspace_groups = 2;
  repeated Profile workspace_users = 3;
  repeated Circle workspace_circles = 4;
  optional bool internal_ids_enabled = 5;
  repeated string workspace_domains = 6;
  optional bool can_manage_no_group = 7;  // Should No Group section in workspace management portal
}

message WorkspaceInvite {
  required string email = 1;
  required string group_uuid = 2;
}

message InviteToWorkspaceRequest {
  repeated WorkspaceInvite workspace_invites = 1;
}

// Possible status codes:
//  SUCCESS - The call itself succeeded
// Possible invite result status codes:
//  NOT_FOUND - A user with the given email address could not be found
//  BAD_REQUEST - The invite was malformed, such as an invalid email address
//  ACCOUNT_EXISTS - The requested user already belongs to the workspace
//  BAD_WORKSPACE - The requested user already belongs to a different workspace
//  UNACCEPTABLE_DOMAIN - The invite failed because the email address cannot be invited
message InviteToWorkspaceResponse {
  required StatusCode status_code = 1;
  map<string, StatusCode> workspace_invite_results = 2;
}

enum SubscriptionTerm {
  MONTH = 1;
  YEAR = 2;
}

enum SubscriptionMediaPackage {
  STANDARD_RESOLUTION = 1;
  HIGH_RESOLUTION = 2;
}

message GetWorkspaceSettingsRequest { }

// Possible status codes:
//  FORBIDDEN - The calling user is not a Workspace Owner
message GetWorkspaceSettingsResponse {
  required StatusCode status_code = 1;
  // Workspace Details Section
  optional string workspace_name = 2;  // Workspace Name (editable)
  optional string company_name = 3; // Company or Organization Name (editable)
  optional uint64 date_created = 4; // epoch microseconds (immutable); localized date string (no time)
  // Plan & Billing Section (all fields read-only)
  optional SubscriptionTerm subscription_term = 5;
  optional SubscriptionMediaPackage subscription_package = 6;
  optional uint64 current_period_start = 7; // epoch microseconds; localized date string (no time); "Current Period Start"
  optional uint64 current_period_end = 8; // epoch microseconds; localized date string (no time); "Current Period End"
  optional uint32 seats_purchased = 9; // Seats Purchased; show as "Seats     X active / Y purchased"
  optional uint32 seats_active = 10; // Seats Active
  optional bool can_manage_via_stripe = 11; // If True, show button for "Manage Subscription & Billing". If False, show "Contact onboarding@photocircleapp.com to change your subscription or billing info."
}

message GetStripeDashboardUrlRequest { }

// Possible status codes:
//  FORBIDDEN - The calling user is not a Workspace Owner
message GetStripeDashboardUrlResponse {
  required StatusCode status_code = 1;
  optional string stripe_url = 2; // Session URL on Stripe for Managing Subscription & Billing; open in new tab
}

message UpdateWorkspaceSettingsRequest {
  optional string workspace_name = 1;  // Workspace Name
  optional string company_name = 2; // Company or Organization Name
}

// Possible status codes:
//  FORBIDDEN - The calling user is not a Workspace Owner
message UpdateWorkspaceSettingsResponse {
  required StatusCode status_code = 1;
}

enum FeatureAbility {
  OFF = 1;
  VIEW = 2;
  ADD = 3;
}

message WorkspacePermissions {
  required bool feature_comments = 1;
  required bool feature_reactions = 2;
  required bool allow_external_guests = 3;
  required bool contributor_add_media = 4;
  required bool contributor_save_media = 5;
  required bool contributor_share_media = 6;
  required bool contributor_view_members = 7;
  required bool contributor_invite_members = 8;
  required FeatureAbility contributor_comment = 9;
  required FeatureAbility contributor_reactions = 10;
  required bool guest_add_media = 11;
  required bool guest_save_media = 12;
  required bool guest_share_media = 13;
  required bool guest_view_members = 14;
  required bool guest_invite_members = 15;
  required FeatureAbility guest_comment = 16;
  required FeatureAbility guest_reactions = 17;
}

message GetWorkspacePermissionsRequest { }

message UpdateWorkspacePermissionsRequest {
  required WorkspacePermissions permissions = 1;
}

// Possible status codes:
//  FORBIDDEN - The calling user is not a Workspace Owner
message WorkspacePermissionsResponse {
  required StatusCode status_code = 1;
  optional WorkspacePermissions permissions = 2;
}

message BrandingConfig {
  required string header_background_color = 1;
  required string primary_color = 2;
  required bytes logo = 3;
  optional string action_url = 4; // tapping on logo opens this url
}

message GetWorkspaceBrandingRequest { }

// Possible status codes:
//  FORBIDDEN - The calling user is not a Workspace Owner
message WorkspaceBrandingResponse {
  required StatusCode status_code = 1;
  optional BrandingConfig branding_config = 2; // if nothing is returned, then nothing has been set for the workspace
}

message UpdateWorkspaceBrandingRequest {
  required BrandingConfig branding_config = 1;
}

enum WorkspaceJoining {
  AUTOMATIC = 1;
  EXPLICIT_INVITATION = 2;
}

message WorkspaceDomain {
  required string domain = 1;
  required WorkspaceJoining workspace_joining = 2;
}

message GetWorkspaceDomainsRequest { }

message UpsertWorkspaceDomainRequest {
  required string domain = 1;
  optional WorkspaceJoining workspace_joining = 2;
}

message RemoveWorkspaceDomainRequest {
  required string domain = 1;
}

// Possible status codes:
//  FORBIDDEN - The calling user is not a Workspace Owner
message WorkspaceDomainResponse {
  required StatusCode status_code = 1;
  optional bool restrict_users_to_domains = 2;
  repeated WorkspaceDomain workspace_domains = 3;
}

message UpdateWorkspaceDomainSettingsRequest {
  required bool restrict_users_to_domains = 1;
}

message GetWorkspaceSeatCountRequest {
}

// Possible status codes:
//  FORBIDDEN - The calling user is not a Group Admin
message GetWorkspaceSeatCountResponse {
  required StatusCode status_code = 1;
  optional uint32 seats_purchased = 2; // If value is not provided, don't show active / purchased to user
  optional uint32 seats_active = 3; // If value is not provided, don't show active / purchased to user
  optional string workspace_name = 4;  // Workspace Name for Invite User bullet points
}